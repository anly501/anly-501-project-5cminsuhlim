}
last_step[i] = states[itr+1] #last room he ends up on each iteration
}
x <- table(last_step)/simulation_number
if(x[9] >= 0.75 & any(x[1:8] <= 0.25)){
done <- T
break
}
itr <- itr + 1
}
return(itr)
}
sim_steps(P, 0.75)
if(x[9] >= 0.75 & any(x[1:8] <= 0.25)){print(hi)}
if(x[9] >= 0.75 & any(x[1:8] <= 0.25)){print('hi')}
x
set.seed(123)
sim_steps = function(P, p) {
itr <- 10
done <- F
while(!done){
last_step = c()
simulation_number = 10000
for (i in 1:simulation_number){
states = rep(1,itr + 1)
for (j in 1:itr){
states[j+1] <- sample(9,1,prob = P[states[j],])
}
last_step[i] = states[itr+1] #last room he ends up on each iteration
}
x <- table(last_step)/simulation_number
if(x[9] >= 0.75 & any(x[1:8] <= 0.25)){
done <- T
break
}
itr <- itr + 1
}
return(itr)
}
sim_steps(P, 0.75)
set.seed(123)
done <- F
steps <- 1
while(!done){
last_step =c()
simulation_number = 10000
for (i in 1:simulation_number){
states = rep(1,steps + 1)
for (j in 1:steps){
states[j+1] <- sample(9,1,prob = P[states[j],])
}
last_step[i] = states[steps+1] #last room he ends up on each iteration
}
x <- table(last_step)/simulation_number
x <- table(last_step)/simulation_number
if(x[9] >= 0.75 & any(x[1:8] <= 0.25)){
done <- T
break
}
steps <- steps + 1
}
steps
set.seed(123)
done <- F
steps <- 1
last_step =c()
simulation_number = 10000
while(!done){
for (i in 1:simulation_number){
states = rep(1,steps + 1)
for (j in 1:steps){
states[j+1] <- sample(9,1,prob = P[states[j],])
}
last_step[i] = states[steps+1] #last room he ends up on each iteration
}
x <- table(last_step)/simulation_number
x <- table(last_step)/simulation_number
if(x[9] >= 0.75 & any(x[1:8] <= 0.25)){
done <- T
break
}
steps <- steps + 1
}
steps
steps <- 100
set.seed(123)
done <- F
steps <- 100
last_step =c()
simulation_number = 10000
while(!done){
for (i in 1:simulation_number){
states = rep(1,steps + 1)
for (j in 1:steps){
states[j+1] <- sample(9,1,prob = P[states[j],])
}
last_step[i] = states[steps+1] #last room he ends up on each iteration
}
x <- table(last_step)/simulation_number
x <- table(last_step)/simulation_number
if(x[9] >= 0.75 & any(x[1:8] <= 0.25)){
done <- T
break
}
steps <- steps + 1
}
steps
set.seed(123)
done <- F
steps <- 150
last_step =c()
simulation_number = 10000
while(!done){
for (i in 1:simulation_number){
states = rep(1,steps + 1)
for (j in 1:steps){
states[j+1] <- sample(9,1,prob = P[states[j],])
}
last_step[i] = states[steps+1] #last room he ends up on each iteration
}
x <- table(last_step)/simulation_number
if(x[9] >= 0.75 & any(x[1:8] <= 0.25)){
done <- T
break
}
steps <- steps + 1
}
steps
# Chunk 1
library(quantmod)
library(ggplot2)
# Chunk 2
options("getSymbols.warning4.0"=FALSE)
options("getSymbols.yahoo.warning"=FALSE)
tickers = c("GOOG","GOOGL","AAPL","TSLA", "AMZN")
for (i in tickers){
getSymbols(i,
from = "2018-01-01",
to = "2022-08-01")}
x <- list(
title = "date"
)
y <- list(
title = "value"
)
stock <- data.frame(GOOG$GOOG.Adjusted,
GOOGL$GOOGL.Adjusted,
AAPL$AAPL.Adjusted,
TSLA$TSLA.Adjusted,
AMZN$AMZN.Adjusted)
stock <- data.frame(stock,rownames(stock))
colnames(stock) <- append(tickers,'Dates')
head(stock)
str(stock)
stock$date<-as.Date(stock$Dates,"%Y-%m-%d")
ggplot(stock, aes(x=date)) +
geom_line(aes(y=GOOG, colour="GOOG"))+
geom_line(aes(y=GOOGL, colour="GOOGL"))+
geom_line(aes(y=AAPL, colour="AAPL"))+
geom_line(aes(y=TSLA, colour="TSLA"))+
geom_line(aes(y=AMZN, colour="AMZN"))+
ggtitle("Adjusted Closing Price for Companies from 2015 to 2021")
# Chunk 3: 1c
P <- matrix(c(0.2, 0, 0, 0.8, 0,
0, 0.2, 0, 0.8, 0,
0.2, 0.2, 0.2, 0.2, 0.2,
0, 0, 0.5, 0.5, 0,
0, 0.25, 0.5, 0, 0.25), ncol=5, nrow=5, byrow=T)
rowSums(P)
P
# Chunk 4: 1d
# 12 steps
powerP = function(A,n){
B <- 0*A
diag(B) <- 1  # make identity matrix
#now B is the identity matrix, it is for initial multiplication
#if you multiply a matrix with the identity matrix, it is the same
for (j in 1:n){
B <- B%*%A
}
return(B)
}
powerP(P, 12)[3,4]
# Chunk 5: 2a
# via matrix
P <- matrix(0, ncol = 9, nrow = 9)
diag(P) <- 1/2
P[1,2] <- P[1,4] <- 1/4
P[2,1] <- P[2,3] <- P[2,5] <- 1/6
P[3,2] <- P[3,6] <- 1/4
P[4,1] <- P[4,5] <- P[4,7] <- 1/6
P[5,2] <- P[5,4] <- P[5,6] <- 1/6
P[6,3] <- P[6,5] <- 1/4
P[7,4] <- P[7,8] <- 1/4
P[8,7] <- P[8,9] <- 1/4
P[9,9] <- 1
rowSums(P)
powerP(P, 3)[1, 3]
# directly
1/2 * 1/4 * 1/6 + 1/4 * 1/2 * 1/6 + 1/4 * 1/6 * 1/2
# Chunk 6: 2b
set.seed(123)
done <- F
steps <- 150
last_step =c()
simulation_number = 10000
while(!done){
for (i in 1:simulation_number){
states = rep(1,steps + 1)
for (j in 1:steps){
states[j+1] <- sample(9,1,prob = P[states[j],])
}
last_step[i] = states[steps+1] #last room he ends up on each iteration
}
x <- table(last_step)/simulation_number
if(x[9] >= 0.75 & any(x[1:8] <= 0.25)){
done <- T
break
}
steps <- steps + 1
}
steps
c(1:9)
print(i)
for i in c(1:9){
print(i)
}
for i in 1:9{
print(i)
}
for i in 1:9{
print(i)
}
for(i in 1:9){
print(i)
}
while(!done){
for(i in 1:8){
powerP(P, 3)[i, 9]
}
}
for(i in 1:8){
powerP(P, 3)[i, 9]
}
for(i in 1:8){
print(powerP(P, 3)[i, 9])
}
print(powerP(P, 155)[i, 9])
for(i in 1:8){
print(powerP(P, 155)[i, 9])
}
for(i in 1:8){
print(powerP(P, 164)[i, 9])
}
for(i in 1:8){
print(powerP(P, 163)[i, 9])
}
for(i in 1:8){
print(powerP(P, 164)[i, 9])
}
all(powerP(P, 5) > 0.2)
done <- false
count <- 1
while(!done){
for(i in 1:8){
done <- all(powerP(P, count)[i, 9] >= 0.75)
}
count <- count + 1
}
count
done <- false
count <- 1
while(!done){
for(i in 1:8){
done <- all(powerP(P, count)[i, 9] >= 0.75)
}
count <- count + 1
}
count
all(powerP(P, 150)[1:8, 9] ?= 0.75)
all(powerP(P, 150)[1:8, 9] >= 0.75)
all(powerP(P, 160)[1:8, 9] >= 0.75)
all(powerP(P, 163)[1:8, 9] >= 0.75)
all(powerP(P, 164)[1:8, 9] >= 0.75)
done <- false
count <- 1
while(!done){
done <- all(powerP(P, count)[1:8, 9] >= 0.75)
count <- count + 1
}
count
set.seed(123)
done <- F
count <- 1
while(!done){
done <- all(powerP(P, count)[1:8, 9] >= 0.75)
count <- count + 1
}
count
set.seed(123)
done <- F
count <- 0
while(!done){
done <- all(powerP(P, count)[1:8, 9] >= 0.75)
count <- count + 1
}
count
set.seed(123)
done <- F
count <- 0
while(!done){
count <- count + 1
done <- all(powerP(P, count)[1:8, 9] >= 0.75)
}
count
set.seed(123)
done <- F
count <- 0
while(!done){
count <- count + 1
done <- all(powerP(P, count)[1:8, 9] >= 0.75)
}
count
done <- F
count <- 0
while(!done){
count <- count + 1
done <- all(powerP(P, count)[1:8, 9] >= 0.75)
}
count
set.seed(123)
n = 10000
df <- data.frame(X = runif(n), Y = runif(n))
plot(df$X, pch=46)
plot(df$Y, pch=46)
df <- df[rowSums(df) < 1,]
plot(df, pch=46)
hist(df$X, prob=T)
hist(df$Y, prob=T)
df2 <- data.frame(X = runif(n), Y = runif(n))
df2$Z <- df$X + df$Y
df2$Z <- df2$X + df2$Y
plot(df2$Z, pch=46)
set.seed(123)
n = 10000
df <- data.frame(X = runif(n), Y = runif(n))
plot(df$X, pch=46)
plot(df$Y, pch=46)
df <- df[rowSums(df) < 1,]
plot(df, pch=46)
hist(df$X, prob=T)
hist(df$X, prob=T)
hist(df$Y, prob=T)
hist(df$X, prob=T)
hist(df$Y, prob=T)
?ribnom
?rbinom
set.seed(123)
n = 10000
df <- data.frame(X = rbinom(n, 80, 0.2), Y = runif(n, 100, 0.2))
View(df)
set.seed(123)
n = 10000
df <- data.frame(X = rbinom(80, 0.2), Y = runif(100, 0.2))
View(df)
set.seed(123)
n = 10000
df <- data.frame(X = rbinom(80, 0.2), Y = rbinom(100, 0.2))
View(df)
set.seed(123)
n = 10000
df <- data.frame(X = rbinom(n, 80, 0.2), Y = rbinom(n, 100, 0.2))
View(df)
set.seed(123)
n = 10000
df <- data.frame(X = rbinom(n, 80, 0.2), Y = rbinom(n, 100, 0.7))
df$Z <- df$X + df$Y
View(df)
df$X < 18
df[df$X < 18,]
df[df$X < 18,]$X
df[df$X < 18 & df$X < 12,]$X
length(df[df$X < 18 & df$X < 12,]$X)
length(df[df$X < 18 & df$X < 12,]$X)/length(df[df$X < 18])
length(df[df$X < 18 & df$X < 12,]$X)/length(df[df$X < 18,]$X)
df[df$X < 18,]$X
length(df[df$X < 18,]$X)
length(df[df$X < 18,]$X) * 0.2
x_ecdf <- ecdf(df[df$X >= 12 & df$X <= 20,]$X)
plot(x_ecdf)
x2_ecdf <- ecdf(df[df$Z == 90,]$X)
plot(x2_ecdf)
length(df[df$X == 10,]$Z) * 0.45
length(df[df$X == 10,]$Z) * 0.45
length(df[df$X == 15,]$Z) * 0.45
length(df[df$X == 20,]$Z) * 0.45
length(df[df$Z == 80,]$X) * 0.2
length(df[df$Z == 90,]$X) * 0.2
length(df[df$Z == 100,]$X) * 0.2
rbinom(80, 0.2)
?rexp
set.seed(123)
X <- rexp(1000)
hist(X)
?rpois
?rnorm
df[df$X + df$Y >= 1,]$Y
df <- data.frame(X = rnorm(n), Y = rnorm(n))
df[df$X + df$Y >= 1,]$Y
set.seed(123)
n = 10000
df <- data.frame(X = rnorm(n), Y = rnorm(n))
df$Z <- df[df$X + df$Y >= 1,]$Y
set.seed(123)
n = 10000
df <- data.frame(X = rnorm(n), Y = rnorm(n))
df$Z <- df[df$X + df$Y >= 1,]$Y
set.seed(123)
n = 10000
df <- data.frame(X = rnorm(n), Y = rnorm(n))
Z <- df[df$X + df$Y >= 1,]$Y
hist(Z)
shapiro.test(Z)
t <- rbinom(80,80,0.2)
length(t)
t < 18
length(t < 18)
length(t[t < 18])
length(t[t < 18]) * 0.2
set.seed(123)
X <- rexp(1000)
hist(X, prob=T)
hist(df$X, prob=T)
set.seed(123)
n = 10000
df <- data.frame(X = runif(n), Y = runif(n))
plot(df$X, pch=46)
plot(df$Y, pch=46)
df <- df[rowSums(df) < 1,]
plot(df, pch=46)
hist(df$X, prob=T)
set.seed(123)
X <- rexp(1000)
hist(X, prob=T)
hist(X)
?rpois
X[X==1.5]
set.seed(123)
X <- rexp(1000)
hist(X, prob=T)
X==1.5
Y <- rpois(1000, X[X==1.5])
hist(Y, prob=T)
setwd("D:/PersonalFolder/SeniorFall/anly-501-project-5cminsuhlim")
df <- read.xlsx('../../data/00-raw-data/wages_(by_occupation_may_2021).xlsx', 1, header=F)
setwd("D:/PersonalFolder/SeniorFall/anly-501-project-5cminsuhlim/codes/02-data-cleaning")
df <- read.xlsx('../../data/00-raw-data/wages_(by_occupation_may_2021).xlsx', 1, header=F)
library(tidyverse)
library(xlsx)
df <- read.xlsx('../../data/00-raw-data/wages_(by_occupation_may_2021).xlsx', 1, header=F)
## remove unnecessary columns
df <- df[, c(10, 11, 12, 13, 19, 20)]
## create column names
names(df) <- df[1,]
df <- df[-1,]
View(df)
## keep major titles
## removing NAs since empty data in this case is useless
df <- df[df$O_GROUP=='detailed',] %>%
select(-c(O_GROUP)) %>%
mutate(TOT_EMP = as.numeric(TOT_EMP),
EMP_PRSE = as.numeric(EMP_PRSE),
A_MEAN = as.numeric(A_MEAN),
MEAN_PRSE = as.numeric(MEAN_PRSE)) %>%
rename(Occupation = OCC_TITLE, `Total Employment` = TOT_EMP,
`Employment PRSE` = EMP_PRSE, `Mean PRSE` = MEAN_PRSE,
`Mean Annual Wage` = A_MEAN)# %>%
is.na(df)
df[is.na(df)]
df[is.na(df),]
na.omit(df)
df <- na.omit(df)# %>%
df$Target <- "X"
df$Target[0:70] <- "Management"
df$Target <- "X"
df$Target[0:30] <- "Management"
df$Target[1:38] <- "Management"
df$Target[39:50] <- "Business and Financial Operations"
df$Target[39:60] <- "Business and Financial Operations"
df$Target[39:70] <- "Business and Financial Operations"
df$Target[71:85] <- "Computer and Mathematical"
df$Target[71:91] <- "Computer and Mathematical"
df$Target[92:110] <- "Architecture and Engineering"
df$Target[92:120] <- "Architecture and Engineering"
df$Target[92:127] <- "Architecture and Engineering"
df$Target[128:150] <- "Life, Physical, and Social Science"
df$Target[128:160] <- "Life, Physical, and Social Science"
df$Target[128:170] <- "Life, Physical, and Social Science"
df$Target[128:175] <- "Life, Physical, and Social Science"
df$Target[176:193] <- "Community and Social Service"
df$Target[193:200] <- "Legal"
## FOR DT/SVM
df <- read.xlsx('../../data/00-raw-data/wages_(by_occupation_may_2021).xlsx', 1, header=F)
## remove unnecessary columns
df <- df[, c(10, 11, 12, 13, 19, 20)]
## create column names
names(df) <- df[1,]
df <- df[-1,]
## keep major titles
## removing NAs since empty data in this case is useless
major <- df <- df[df$O_GROUP=='major',]
View(major)
