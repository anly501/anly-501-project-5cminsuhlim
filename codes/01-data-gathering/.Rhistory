all.sample.sums		<- apply(my.samples, 1, sum)
all.sample.means	<- apply(my.samples, 1, mean)
par(mfrow = c(2,2))
curve(f(x), from = 0, to = max(my.samples), ylab = 'pdf', main = 'Population Distribution')
hist(my.samples[1,], col = "red", main = "Distribution of One Sample", xlab = "x")
hist(all.sample.sums, col = "darkblue", main = "Sampling Distribution of the Sum", xlab = "x")
hist(all.sample.means, col = "darkgray", main = "Sampling Distribution of the Mean", xlab = "x")
}
curve(dexp(x, rate = 1), from = -0.1, to = 7, lwd = 2, col = 'sienna3', ylab = expression(f[X](x)),
xlab = 'x')
set.seed(1032019)
sdm.sim(5, src.dist = "E", param1 = 1)
set.seed(1032019)
sdm.sim(10, src.dist = "E", param1 = 1)
set.seed(1032019)
source('C:/Users/Eric/Desktop/MATH-140/R/Lec21.R')
source('C:/Users/Eric/Desktop/MATH-140/R/Lec21.R')
### run this code first ##########################################################################
sdm.sim	<- function(n, src.dist = "P", param1 = 5, param2 = NULL) {
r	<- 100  # Number of replications/samples - DO NOT ADJUST
# This produces a matrix of observations with
# n columns and r rows. Each row is one sample:
my.samples <- switch(src.dist,
"E" = matrix(rexp(n*r, rate = param1), r),
"N" = matrix(rnorm(n*r, mean = param1, sd = param2), r),
"U" = matrix(runif(n*r, min = param1, max = param2), r),
"P" = matrix(rpois(n*r, lambda = param1), r),
"B" = matrix(rbinom(n*r, size = param1, prob = param2), r),
"G" = matrix(rgamma(n*r, shape = param1, rate = param2), r))
f	<- switch(src.dist,
"E" = function(x){dexp(x, rate = param1)},
"N" = function(x){dnorm(x, mean = param1, sd = param2)},
"U" = function(x){dunif(x, min = param1, max = param2)},
"P" = function(x){dpois(x, lambda = param1)},
"B" = function(x){dbinom(x, size = param1, prob = param2)},
"G" = function(x){dgamma(x, shape = param1, rate = param2)})
all.sample.sums		<- apply(my.samples, 1, sum)
all.sample.means	<- apply(my.samples, 1, mean)
par(mfrow = c(2,2))
curve(f(x), from = 0, to = max(my.samples), ylab = 'pdf', main = 'Population Distribution')
hist(my.samples[1,], col = "red", main = "Distribution of One Sample", xlab = "x")
hist(all.sample.sums, col = "darkblue", main = "Sampling Distribution of the Sum", xlab = "x")
hist(all.sample.means, col = "darkgray", main = "Sampling Distribution of the Mean", xlab = "x")
}
source('C:/Users/Eric/Desktop/MATH-140/R/Lec21.R')
source('C:/Users/Eric/Desktop/MATH-140/R/Lec21.R')
source('C:/Users/Eric/Desktop/MATH-140/R/Lec21.R')
r	<- 50  # Number of replications/samples - DO NOT ADJUST
source('C:/Users/Eric/Desktop/MATH-140/R/Lec21.R')
source('C:/Users/Eric/Desktop/MATH-140/R/Lec21.R')
source('C:/Users/Eric/Desktop/MATH-140/R/Lec21.R')
source('C:/Users/Eric/Desktop/MATH-140/R/Lec21.R')
source('C:/Users/Eric/Desktop/MATH-140/R/Lec21.R')
source('C:/Users/Eric/Desktop/MATH-140/R/Lec21.R')
source('C:/Users/Eric/Desktop/MATH-140/R/Lec21.R')
source('C:/Users/Eric/Desktop/MATH-140/R/Lec24.R')
source('C:/Users/Eric/Desktop/MATH-140/R/Lec24.R', echo=TRUE)
source('C:/Users/Eric/Desktop/MATH-140/R/Lec24.R', echo=TRUE)
source('C:/Users/Eric/Desktop/MATH-140/R/Lec24.R', echo=TRUE)
source('C:/Users/Eric/Desktop/MATH-140/R/Lec24.R')
source('C:/Users/Eric/Desktop/MATH-140/R/Lec24.R')
source('C:/Users/Eric/Desktop/MATH-140/R/Lec24.R', echo=TRUE)
source('C:/Users/Eric/Desktop/MATH-140/R/HW10.R', echo=TRUE)
source('C:/Users/Eric/Desktop/MATH-140/R/HW10.R')
source('C:/Users/Eric/Desktop/MATH-140/R/HW10.R')
source('C:/Users/Eric/Desktop/MATH-140/R/HW10.R', echo=TRUE)
source('C:/Users/Eric/Desktop/MATH-140/R/Lec27.R', echo=TRUE)
source('C:/Users/Eric/Desktop/MATH-140/R/HW10.R', echo=TRUE)
source('C:/Users/Eric/Desktop/MATH-140/R/HW10.R', echo=TRUE)
source('C:/Users/Eric/Desktop/MATH-140/R/HW10.R', echo=TRUE)
source('C:/Users/Eric/Desktop/MATH-140/R/HW10.R', echo=TRUE)
source('C:/Users/Eric/Desktop/MATH-140/R/HW10.R', echo=TRUE)
source('C:/Users/Eric/Desktop/MATH-140/R/HW10.R', echo=TRUE)
source('C:/Users/Eric/Desktop/MATH-140/R/HW10.R', echo=TRUE)
source('C:/Users/Eric/Desktop/MATH-140/R/HW10.R', echo=TRUE)
source('C:/Users/Eric/Desktop/MATH-140/R/HW10.R')
source('C:/Users/Eric/Desktop/MATH-140/R/HW10.R', echo=TRUE)
source('C:/Users/Eric/Desktop/MATH-140/R/HW10.R', echo=TRUE)
source('C:/Users/Eric/Desktop/MATH-140/R/HW10.R')
source('C:/Users/Eric/Desktop/MATH-140/R/HW10.R')
source('C:/Users/Eric/Desktop/MATH-140/R/HW10.R')
source('C:/Users/Eric/Desktop/MATH-140/R/HW10.R')
source('C:/Users/Eric/Desktop/MATH-140/R/HW10.R')
source('C:/Users/Eric/Desktop/MATH-140/R/HW10.R', echo=TRUE)
source('C:/Users/Eric/Desktop/MATH-140/R/HW10.R', echo=TRUE)
source('C:/Users/Eric/Desktop/MATH-140/R/HW10.R', echo=TRUE)
source('C:/Users/Eric/Desktop/MATH-140/R/HW10.R', echo=TRUE)
source('C:/Users/Eric/Desktop/MATH-140/R/HW10.R')
source('C:/Users/Eric/Desktop/MATH-140/R/HW10.R', echo=TRUE)
source('C:/Users/Eric/Desktop/MATH-140/R/HW10.R')
source('~/.active-rstudio-document', echo=TRUE)
source('C:/Users/Eric/Desktop/MATH-140/R/Lec27.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('C:/Users/Eric/Desktop/MATH-140/R/Lec27.R', echo=TRUE)
source('C:/Users/Eric/Desktop/MATH-140/R/Lec27.R', echo=TRUE)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('D:/Eric/Code_Oct_28.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document', echo=TRUE)
source('D:/PersonalFolder/MATH-325/HW/HW2.R')
source('D:/PersonalFolder/MATH-325/HW/HW2.R')
source('D:/PersonalFolder/MATH-325/HW/HW2.R')
source('D:/PersonalFolder/MATH-325/HW/HW2.R', echo=TRUE)
source('D:/PersonalFolder/MATH-325/HW/HW2.R', echo=TRUE)
source('D:/PersonalFolder/MATH-325/HW/HW2.R', echo=TRUE)
source('D:/PersonalFolder/MATH-325/HW/HW2.R')
source('D:/PersonalFolder/MATH-325/HW/HW2.R', echo=TRUE)
source('D:/PersonalFolder/MATH-325/HW/HW2.R', echo=TRUE)
source('D:/PersonalFolder/MATH-325/L05.R')
source('D:/PersonalFolder/MATH-325/HW/HW2.R')
source('D:/PersonalFolder/MATH-325/HW/HW2.R', echo=TRUE)
source('D:/PersonalFolder/MATH-325/HW/HW2.R')
source('D:/PersonalFolder/MATH-325/HW/HW2.R')
source('D:/PersonalFolder/MATH-325/HW/HW2.R', echo=TRUE)
source('D:/PersonalFolder/MATH-325/HW/HW2.R', echo=TRUE)
source('D:/PersonalFolder/MATH-325/HW/HW2.R', echo=TRUE)
source('D:/PersonalFolder/MATH-325/HW/HW2.R', echo=TRUE)
source('D:/PersonalFolder/MATH-325/HW/HW2.R', echo=TRUE)
source('D:/PersonalFolder/MATH-325/HW/HW2.R', echo=TRUE)
source('D:/PersonalFolder/MATH-325/HW/HW2.R')
source('D:/PersonalFolder/MATH-325/HW/HW2.R', echo=TRUE)
source('D:/PersonalFolder/MATH-325/HW/HW2.R', echo=TRUE)
source('D:/PersonalFolder/MATH-325/HW/HW2.R', echo=TRUE)
source('D:/PersonalFolder/MATH-325/HW/HW2.R', echo=TRUE)
?pwr.2p2n.test
source('D:/PersonalFolder/MATH-325/HW/HW2.R', echo=TRUE)
source('D:/PersonalFolder/MATH-325/HW/HW2.R')
source('D:/PersonalFolder/MATH-325/HW/HW2.R')
source('D:/PersonalFolder/MATH-325/HW/HW2.R', echo=TRUE)
source('D:/PersonalFolder/MATH-325/HW/HW2.R')
source('D:/PersonalFolder/MATH-325/HW/HW2.R', echo=TRUE)
source('D:/PersonalFolder/MATH-325/HW/HW2.R')
source('D:/PersonalFolder/MATH-325/HW/HW2.R', echo=TRUE)
source('D:/PersonalFolder/MATH-325/HW/HW2.R', echo=TRUE)
source('D:/PersonalFolder/MATH-325/HW/HW2.R', echo=TRUE)
source('D:/PersonalFolder/MATH-325/HW/HW2.R', echo=TRUE)
source('D:/PersonalFolder/MATH-325/HW/HW2.R')
source('D:/PersonalFolder/MATH-325/L09.R')
source('D:/PersonalFolder/MATH-325/L09.R')
chisq.test(tab,correct=FALSE)
mean(mtcars$mpg)
install.packages("languageserver")
---
title: "My First R Markdown"
author: "ME!"
date: "11/30/2021"
output: pdf_document
---
knitr::opts_chunk$set(echo = TRUE)
print("Hello World")
summary(cars)
knitr::opts_chunk$set(echo = TRUE)
matrix_one
base_vector <- seq(100)
matrix_one <- matrix(base_vector,nrow=10)
matrix_two <- matrix(base_vector, nrow=5)
matrix_three <- matrix(base_vector,nrow=5, byrow=T)
##summary stats for ALL entries (treats matrix as vector)
mean(matrix_one)
sd(matrix_one)
median(matrix_one)
quantile(matrix_one)
quantile(matrix_one,.2)
##summary stats by rows (treats each row as a vector)
apply(matrix_two,1,mean)
apply(matrix_two,1,sd)
apply(matrix_two,1,quantile)
apply(matrix_two,1,quantile,.2)
##summary stats by columns (treats each column as a vector)
apply(matrix_two,2,mean)
apply(matrix_two,2,sd)
##class & size
class(matrix_two)
length(matrix_two) #total number of entries
dim(matrix_two) #number of rows and columns
nrow(matrix_two) #number of rows
ncol(matrix_two) #number of columns
##accessing parts by index numbers
matrix_one[12] #not recommended
matrix_one[2,3] #row, column
matrix_one[c(2,3),c(4,5)]
matrix_one[1:3,1:5]
matrix_one[1,]
matrix_one[,1]
##accesing parts with names
rownames(matrix_one) <- c("a","b","c","d","e","f","g","h","i","j")
colnames(matrix_one) <- toupper(c("a","b","c","d","e","f","g","h","i","j"))
matrix_one["b","D"]
which(matrix_one <= 10)
matrix_one[which(matrix_one <= 10)]
hist(matrix_one)
plot(matrix_one) #note what is plotted here
pairs(matrix_one)
stripchart(matrix_one)
stem(matrix_one)
boxplot(matrix_one) #note separation
matrix_one + matrix_two #can't do it, dimension mismatch
matrix_one + matrix_one
matrix_two - matrix_two
matrix_two*matrix_two # NOT MATRIX MULTIPLICATION, element-wise multiplication
m_4 <- matrix(c(2,5,2,8,0,10),nrow=3)
m_5 <- matrix(c(3,2,1,0,0,4,1,4,1,9,11,2),nrow=2)
m_4%*%m_5 #matrix multiplication
m_5%*%m_4 #dimensional mismatch
matrix_one
t(matrix_one)
t(matrix_two) %*% matrix_two
matrix_two %*% t(matrix_two) #as always, order matters
##inverse
A = matrix(c(1,2,4,3),nrow=2)
solve(A)
A_inv = solve(A)
A_inv %*% A
A %*% A_inv
det(A)
## b) Compute D^-1
D_inv <- solve(D)
D_inv
## Ex 1 ##
A <- matrix(c(2, 3, 0, 1), 2, 2)
B <- matrix(c(5, 3, 1, -4), 2, 2)
C <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), 3, 4)
D <- matrix(c(1, 2, 5, 8, -1, 0, 3, 2, 1), 3, 3)
## a) Compute AB
A %*% B
## b) Compute BA
B %*% A
## c) Compute DC
D %*% C
## d) Compute CD
C %*% D
## e) Compute D^2
D %*% D
## a) Compute the determinant of D
detD <- det(D)
detD
## b) Compute D^-1
D_inv <- solve(D)
D_inv
## c) Using the D^-1 that you computed in (b), compute D^-1 D. Is this matrix
## equal to I, the identity matrix? If not, how different from I is it?
## (Use the norm() function to characterize the size of difference.)
D_inv %*% D
B = matrix(c(3,2,1,4,3,5,6,3,1),nrow=3)
solve(B)
B_inv = solve(B)
B_inv %*% B
B %*% B_inv
det(B)
##inverse
A = matrix(c(1,2,4,3),nrow=2)
solve(A)
A_inv = solve(A)
##inverse
A = matrix(c(1,2,4,3),nrow=2)
View(A)
solve(A)
A_inv = solve(A)
A_inv %*% A
t(matrix_two) %*% matrix_two
## d) Using the D^-1 that you computed in (a), compute D^-1 D. Is this matrix
## equal to I, the identity matrix? If not, how different from I is it?
## (Use the norm() function to characterize the size of difference.)
(1 / detD) * t(D)
norm((1 / detD) * t(D))
## c) Using the D^-1 that you computed in (b), compute D^-1 D. Is this matrix
## equal to I, the identity matrix? If not, how different from I is it?
## (Use the norm() function to characterize the size of difference.)
D_inv %*% D
norm(D_inv %*% D)
hist(matrix_one)
plot(matrix_one) #note what is plotted here
pairs(matrix_one)
stripchart(matrix_one)
stem(matrix_one)
boxplot(matrix_one) #note separation
View(matrix_one)
## Ex 1 ##
A <- matrix(c(2, 3, 0, 1), 2, 2)
B <- matrix(c(5, 3, 1, -4), 2, 2)
C <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), 3, 4)
D <- matrix(c(1, 2, 5, 8, -1, 0, 3, 2, 1), 3, 3)
## a) Compute AB
A %*% B
## b) Compute BA
B %*% A
## c) Compute DC
D %*% C
## d) Compute CD
C %*% D
## e) Compute D^2
D %*% D
## a) Compute the determinant of D
detD <- det(D)
detD
## b) Compute D^-1
D_inv <- solve(D)
D_inv
## c) Using the D^-1 that you computed in (b), compute D^-1 D. Is this matrix
## equal to I, the identity matrix? If not, how different from I is it?
## (Use the norm() function to characterize the size of difference.)
D_inv %*% D
?norm
norm(D_inv %*% D)
## c) Using the D^-1 that you computed in (b), compute D^-1 D. Is this matrix
## equal to I, the identity matrix? If not, how different from I is it?
## (Use the norm() function to characterize the size of difference.)
diag(3)
## c) Using the D^-1 that you computed in (b), compute D^-1 D. Is this matrix
## equal to I, the identity matrix? If not, how different from I is it?
## (Use the norm() function to characterize the size of difference.)
I_3 <- diag(3)
diff <- D_inv %*% D - I_3
norm(diff)
## d) Using the D^-1 that you computed in (a), compute D^-1 D. Is this matrix
## equal to I, the identity matrix? If not, how different from I is it?
## (Use the norm() function to characterize the size of difference.)
D_adj <- detD * D_inv
diff_d <- D_adj * detD - I_3
norm(diff_d)
diff_d <- D_adj * (1/detD) - I_3
norm(diff_d)
## c) Using the D^-1 that you computed in (b), compute D^-1 D. Is this matrix
## equal to I, the identity matrix? If not, how different from I is it?
## (Use the norm() function to characterize the size of difference.)
I_3 <- diag(3)
diff_c <- D_inv %*% D - I_3
norm(diff)
## d) Using the D^-1 that you computed in (a), compute D^-1 D. Is this matrix
## equal to I, the identity matrix? If not, how different from I is it?
## (Use the norm() function to characterize the size of difference.)
D_adj <- detD * D_inv
diff_d <- D_adj * (1/detD) - I_3
norm(diff_d)
diff_d <- D_adj * (1/detD) %*% D_inv - I_3
diff_d <- (D_adj * (1/detD)) %*% D_inv - I_3
norm(diff_d)
## d) Using the D^-1 that you computed in (a), compute D^-1 D. Is this matrix
## equal to I, the identity matrix? If not, how different from I is it?
## (Use the norm() function to characterize the size of difference.)
D_adj <- detD * D_inv
diff_d <- (D_adj * (1/detD)) %*% D_inv - I_3
norm(diff_d)
D_inv_alt <- D_adj * (1 / detD)
## d) Using the D^-1 that you computed in (a), compute D^-1 D. Is this matrix
## equal to I, the identity matrix? If not, how different from I is it?
## (Use the norm() function to characterize the size of difference.)
D_adj <- detD * D_inv
D_inv_alt <- D_adj * (1 / detD)
diff_d <- D_inv_alt %*% D - I_3
norm(diff_d)
## c) Using the D^-1 that you computed in (b), compute D^-1 D. Is this matrix
## equal to I, the identity matrix? If not, how different from I is it?
## (Use the norm() function to characterize the size of difference.)
I_3 <- diag(3)
diff_c <- D_inv %*% D - I_3
norm(diff)
## d) Using the D^-1 that you computed in (a), compute D^-1 D. Is this matrix
## equal to I, the identity matrix? If not, how different from I is it?
## (Use the norm() function to characterize the size of difference.)
D_adj <- detD * D_inv
D_inv_alt <- D_adj * (1 / detD)
diff_d <- D_inv_alt %*% D - I_3
norm(diff_d)
## a) Consider the following linear system:
## 4x + 5y + 7z = 2
## 4x + 7y + 10z = 6
## 4x + 9y + 13z = 12
## Use matrix computations in R to either solve this system or determine that
## it does not have a unique solution.
A <- matrix(c(4, 4, 4, 5, 7, 9, 7, 10, 13), 3, 3)
View(A)
b <- matrix(c(2, 6, 12), 3, 1)
View(b)
solve(A, b)
## b) Consider the following linear system:
## 3x + 2y + z = 2
## 3x + 4y + z = 4
## 6x + 4y + 3z = 1
## Use matrix computations in R to either solve this system or determine that
## it does not have a unique solution.
A <- matrix(c(3, 3, 6, 2, 4, 4, 1, 1, 3), 3, 3)
b <- matrix(c(2, 4, 1), 3, 1)
solve(A, b)
## Ex 1 ##
A <- matrix(c(2, 3, 0, 1), 2, 2)
View(A)
B <- matrix(c(5, 3, 1, -4), 2, 2)
View(B)
C <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), 3, 4)
View(D)
View(C)
D <- matrix(c(1, 2, 5, 8, -1, 0, 3, 2, 1), 3, 3)
## a) Compute AB
A %*% B
## b) Compute BA
B %*% A
## c) Compute DC
D %*% C
## d) Compute CD
C %*% D
## e) Compute D^2
D %*% D
## a) Compute the determinant of D
detD <- det(D)
detD
## b) Compute D^-1
D_inv <- solve(D)
D_inv
## c) Using the D^-1 that you computed in (b), compute D^-1 D. Is this matrix
## equal to I, the identity matrix? If not, how different from I is it?
## (Use the norm() function to characterize the size of difference.)
I_3 <- diag(3)
diff_c <- D_inv %*% D - I_3
norm(diff)
## d) Using the D^-1 that you computed in (a), compute D^-1 D. Is this matrix
## equal to I, the identity matrix? If not, how different from I is it?
## (Use the norm() function to characterize the size of difference.)
D_adj <- detD * D_inv
D_inv_alt <- D_adj * (1 / detD)
diff_d <- D_inv_alt %*% D - I_3
norm(diff_d)
## a) Consider the following linear system:
## 4x + 5y + 7z = 2
## 4x + 7y + 10z = 6
## 4x + 9y + 13z = 12
## Use matrix computations in R to either solve this system or determine that
## it does not have a unique solution.
A <- matrix(c(4, 4, 4, 5, 7, 9, 7, 10, 13), 3, 3)
b <- matrix(c(2, 6, 12), 3, 1)
solve(A, b)
## b) Consider the following linear system:
## 3x + 2y + z = 2
## 3x + 4y + z = 4
## 6x + 4y + 3z = 1
## Use matrix computations in R to either solve this system or determine that
## it does not have a unique solution.
A <- matrix(c(3, 3, 6, 2, 4, 4, 1, 1, 3), 3, 3)
b <- matrix(c(2, 4, 1), 3, 1)
solve(A, b)
## Ex 1 ##
A <- matrix(c(2, 3, 0, 1), 2, 2)
B <- matrix(c(5, 3, 1, -4), 2, 2)
C <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), 3, 4)
D <- matrix(c(1, 2, 5, 8, -1, 0, 3, 2, 1), 3, 3)
## a) Compute AB
A %*% B
## b) Compute BA
B %*% A
## c) Compute DC
D %*% C
## d) Compute CD
C %*% D
## e) Compute D^2
D %*% D
## a) Compute the determinant of D
detD <- det(D)
detD
## b) Compute D^-1
D_inv <- solve(D)
D_inv
## c) Using the D^-1 that you computed in (b), compute D^-1 D. Is this matrix
## equal to I, the identity matrix? If not, how different from I is it?
## (Use the norm() function to characterize the size of difference.)
I_3 <- diag(3)
diff <- D_inv %*% D - I_3
norm(diff)
## d) Using the D^-1 that you computed in (b), compute D D^-1. Is this matrix
## equal to I, the identity matrix? If not, how different from I is it?
## (Use the norm() function to characterize the size of difference.)
I_3 <- diag(3)
diff <- D %*% D_inv - I_3
norm(diff)
solve(A, b)
A <- matrix(c(1, 3, 3, 0))
b <- matrix(c(2, 0))
solve(A, b)
b <- matrix(c(2, 0), 2, 1)
A <- matrix(c(1, 3, 3, 0), 2, 2)
b <- matrix(c(2, 0), 2, 1)
solve(A, b)
View(A)
A <- matrix(c(1, 3, 3, 1), 2, 2)
b <- matrix(c(2, 2), 2, 1)
solve(A, b)
A <- matrix(c(1, 3, 3, 4), 2, 2)
b <- matrix(c(2, 4), 2, 1)
solve(A, b)
A <- matrix(c(1, 3, 3, 25), 2, 2)
b <- matrix(c(2, 10), 2, 1)
solve(A, b)
shiny::runApp('D:/PersonalFolder/JuniorSpring/MATH105/TechEx6')
library (readr)
urlfile="https://raw.githubusercontent.com/lrjoshi/webpage/master/public/post/c159s.csv"
mydata<-read_csv(url(urlfile))
urlfile="https://raw.githubusercontent.com/automoto/big-five-data/master/big_five_scores.csv"
mydata<-read_csv(url(urlfile))
View(mydata)
raw_url = "https://raw.githubusercontent.com/automoto/big-five-data/master/big_five_scores.csv"
big_five_df <- read_csv(url(raw_url))
View(big_five_df)
setwd("D:/PersonalFolder/SeniorFall/anly-501-project-5cminsuhlim/codes/01-data-gathering")
write.csv(big_five_df, "big_five.csv", row.names = FALSE)
