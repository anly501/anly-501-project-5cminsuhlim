---
jupyter: python3
pdf-engine: lualatex
format:
  html:
    theme : yeti
    toc: true
    code-fold: true #enable code dropdown for html output
    code-code-overflow: wrap  
    toc-title: Contents
    error: false
    warning: false
execute:
    echo: True  #True=show code in output, false=don't
---

# Exploring Data

Initial exploratory data analysis has been conducted below. The data gathered and cleaned previously have been categorized. The specific codes for data exploration can be found below in each respective section. 

## Big Five Personality Data

Prior to diving into the details of the data, it's important to understand what the Big Five Personality traits are. **Openness** relates to imagination, insight, creativity, and curiousity. **Conscientiousness** relates to thoughtfulness, self-control, attention to detail, and orderliness. **Extraversion** relates to sociability, assertiveness, and excitability. **Agreeableness** relates to prosocial behaviors, such as empathy, altruism, and affection. **Neuroticism** relates to anxiety, low stress tolerance, and emotional instability.^1^

```{python}
import  pandas  as  pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np 

df = pd.read_csv('../../data/01-modified-data/big_five_final.csv')

print("----------------------")
print("BASIC STATISTICS:")
print("----------------------")
print(df.describe())
```

The output above is a basic summary statistic output of the Big Five Personality data. Based on the case id count, we can see that out data set contains 212,625 individuals from the U.S. The age column also provides insight on the age of the individuals who have participated in this survey, where the youngest and oldest individuals who have taken this assessment are 10 and 99 years old, but the general age of these individuals hovers from around 18 to 29 years old. Since sex is labeled numerically in this data (where 1 = Men and 2 = Women), the mean sex of 1.6 shows that there are more women than men in this data set. Additionally, it should be noted that the scoring of each personality category is on a scale of 0 to 1, where 0 is low association and 1 is high association with a particular category.


```{python}
# ref: https://towardsdatascience.com/better-heatmaps-and-correlation-matrix-plots-in-python-41445d0f2bec

df = df[df.columns[2:]]
df.rename(columns={"agreeable_score":'agreeableness', "extraversion_score":'extraversion', "openness_score":'openness', "conscientiousness_score":'conscientiousness', "neuroticism_score":'neuroticism'}, inplace=True)
corr = df.corr()

sns.set()

def heatmap(x, y, **kwargs):
    if 'color' in kwargs:
        color = kwargs['color']
    else:
        color = [1]*len(x)

    if 'palette' in kwargs:
        palette = kwargs['palette']
        n_colors = len(palette)
    else:
        n_colors = 256 # Use 256 colors for the diverging color palette
        palette = sns.color_palette("Blues", n_colors) 

    if 'color_range' in kwargs:
        color_min, color_max = kwargs['color_range']
    else:
        color_min, color_max = min(color), max(color) # Range of values that will be mapped to the palette, i.e. min and max possible correlation

    def value_to_color(val):
        if color_min == color_max:
            return palette[-1]
        else:
            val_position = float((val - color_min)) / (color_max - color_min) # position of value in the input range, relative to the length of the input range
            val_position = min(max(val_position, 0), 1) # bound the position betwen 0 and 1
            ind = int(val_position * (n_colors - 1)) # target index in the color palette
            return palette[ind]

    if 'size' in kwargs:
        size = kwargs['size']
    else:
        size = [1]*len(x)

    if 'size_range' in kwargs:
        size_min, size_max = kwargs['size_range'][0], kwargs['size_range'][1]
    else:
        size_min, size_max = min(size), max(size)

    size_scale = kwargs.get('size_scale', 500)

    def value_to_size(val):
        if size_min == size_max:
            return 1 * size_scale
        else:
            val_position = (val - size_min) * 0.99 / (size_max - size_min) + 0.01 # position of value in the input range, relative to the length of the input range
            val_position = min(max(val_position, 0), 1) # bound the position betwen 0 and 1
            return val_position * size_scale
    if 'x_order' in kwargs: 
        x_names = [t for t in kwargs['x_order']]
    else:
        x_names = [t for t in sorted(set([v for v in x]))]
    x_to_num = {p[1]:p[0] for p in enumerate(x_names)}

    if 'y_order' in kwargs: 
        y_names = [t for t in kwargs['y_order']]
    else:
        y_names = [t for t in sorted(set([v for v in y]))]
    y_to_num = {p[1]:p[0] for p in enumerate(y_names)}

    plot_grid = plt.GridSpec(1, 15, hspace=0.2, wspace=0.1) # Setup a 1x10 grid
    ax = plt.subplot(plot_grid[:,:-1]) # Use the left 14/15ths of the grid for the main plot

    marker = kwargs.get('marker', 's')

    kwargs_pass_on = {k:v for k,v in kwargs.items() if k not in [
         'color', 'palette', 'color_range', 'size', 'size_range', 'size_scale', 'marker', 'x_order', 'y_order'
    ]}

    ax.scatter(
        x=[x_to_num[v] for v in x],
        y=[y_to_num[v] for v in y],
        marker=marker,
        s=[value_to_size(v) for v in size], 
        c=[value_to_color(v) for v in color],
        **kwargs_pass_on
    )
    ax.set_xticks([v for k,v in x_to_num.items()])
    ax.set_xticklabels([k for k in x_to_num], rotation=45, horizontalalignment='right')
    ax.set_yticks([v for k,v in y_to_num.items()])
    ax.set_yticklabels([k for k in y_to_num])

    ax.grid(False, 'major')
    ax.grid(True, 'minor')
    ax.set_xticks([t + 0.5 for t in ax.get_xticks()], minor=True)
    ax.set_yticks([t + 0.5 for t in ax.get_yticks()], minor=True)

    ax.set_xlim([-0.5, max([v for v in x_to_num.values()]) + 0.5])
    ax.set_ylim([-0.5, max([v for v in y_to_num.values()]) + 0.5])
    ax.set_facecolor('#F1F1F1')

    # Add color legend on the right side of the plot
    if color_min < color_max:
        ax = plt.subplot(plot_grid[:,-1]) # Use the rightmost column of the plot

        col_x = [0]*len(palette) # Fixed x coordinate for the bars
        bar_y=np.linspace(color_min, color_max, n_colors) # y coordinates for each of the n_colors bars

        bar_height = bar_y[1] - bar_y[0]
        ax.barh(
            y=bar_y,
            width=[5]*len(palette), # Make bars 5 units wide
            left=col_x, # Make bars start at 0
            height=bar_height,
            color=palette,
            linewidth=0
        )
        ax.set_xlim(1, 2) # Bars are going from 0 to 5, so lets crop the plot somewhere in the middle
        ax.grid(False) # Hide grid
        ax.set_facecolor('white') # Make background white
        ax.set_xticks([]) # Remove horizontal ticks
        ax.set_yticks(np.linspace(min(bar_y), max(bar_y), 3)) # Show vertical ticks for min, middle and max
        ax.yaxis.tick_right() # Show vertical ticks on the right 

def corrplot(data, size_scale=500, marker='s'):
    corr = pd.melt(data.reset_index(), id_vars='index')
    corr.columns = ['x', 'y', 'value']
    heatmap(
        corr['x'], corr['y'],
        color=corr['value'], color_range=[-1, 1],
        palette=sns.diverging_palette(20, 220, n=256),
        size=corr['value'].abs(), size_range=[0,1],
        marker=marker,
        x_order=data.columns,
        y_order=data.columns[::-1],
        size_scale=size_scale
    )

columns = ['age', 'sex', 'agreeableness', 'extraversion', 'openness', 'conscientiousness', 'neuroticism'] 

plt.figure(figsize=(10, 10))
corrplot(corr)
```

The correlation heatmap above shows the correlations among every variable pair, where the "depth" of the color and the size of eachs quare represents the magnitude of correlation. We can see that there is a weak positive correlation with age and conscientiousness. There is also a weak positive correlation with sex and agreeableness. Among the traits themselves, there is a weak positive correlation between agreeableness and conscientiousness, as well as a moderate negative correlation among neuroticism, extraversion, and conscientiousness.

```{python}
print("----------------------")
print("CORRELATION MATRIX:")
print("----------------------")
print(corr)
```

We can also numerically represent the previous correlation heatmap and see the raw correlation numbers.


# References:
Cherry, Kendra. "What Are the Big 5 Personality Traits?" Verywell Mind, Verywell Mind, 4 Aug 2022, URL