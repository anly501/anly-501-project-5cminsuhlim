as.numeric(df$yearly_income_usd)
df$yearly_income_usd
## INSERT CODE TO REPLACE ANY "yearly_income_usd" THAT IS A STRING WITH NUMPY nan OBJECT
df$yearly_income_usd <- as.numeric(df$yearly_income_usd)
# PRINT THE DATA FRAME
df
df$yearly_income_usd
df[is.na(df)] <- NaN
# PRINT THE DATA FRAME
df
df
?drop_nan
?drop_na
drop_na(df)
df
df.iloc[1]
df.loc[1]
df[1]
df['customer_id']
# SOMETIME PANDAS READS COLUMNS IN AS STRINGS RATHER THAN NUMBERS
# INSERT CODE TO TYPE-CAST ALL OF THE FOLLOWING COLUMNS AS FLOATS
# ["customer_id","age_years","account_balance_usd","yearly_income_usd","housing_payment_usd"]
for(col in c("customer_id","age_years","account_balance_usd","yearly_income_usd","housing_payment_usd")){
df[col] <- as.numeric(df[col])
}
as.numeric(df['customer_id'])
as.numeric(df$customer_id)
# SOMETIME PANDAS READS COLUMNS IN AS STRINGS RATHER THAN NUMBERS
# INSERT CODE TO TYPE-CAST ALL OF THE FOLLOWING COLUMNS AS FLOATS
# ["customer_id","age_years","account_balance_usd","yearly_income_usd","housing_payment_usd"]
for(col in c("customer_id","age_years","account_balance_usd","yearly_income_usd","housing_payment_usd")){
df$col <- as.numeric(df$col)
}
select(df, -5)
select(df, -4)
select(df, -6)
df
select(df, -5)
df <- df %>% select(-5) %>% mutate(as.numeric)
# SOMETIME PANDAS READS COLUMNS IN AS STRINGS RATHER THAN NUMBERS
# INSERT CODE TO TYPE-CAST ALL OF THE FOLLOWING COLUMNS AS FLOATS
# ["customer_id","age_years","account_balance_usd","yearly_income_usd","housing_payment_usd"]
df <- df %>% select(-5) %>% mutate_all(as.numeric)
df <- df %>% select(-5) %>% mutate_all(as.numeric)
df
library(tidyverse)
# INSERT CODE TO READ THE DATA FILES (hint .. google --> "how to read csv file with pandas")
df1 <- read_csv("./data/example-1.csv")
df2 <- read_csv("./data/example-2.csv")
df1
df2
# LOOK AT FIRST COUPLE LINES
head(df1, 2)
head(df2, 2)
# LOOK AT LAST COUPLE LINES
tail(df1, 2)
tail(df2, 2)
## INSERT CODE TO REMOVE SPACES FROM COLUMN NAMES
names(df1) <- gsub(" ", "", names(df1))
names(df2) <- gsub(" ", "", names(df2))
# INSERT CODE TO RENAME THE COLUMN NAME "age" --> "age_years" and "country" as "country_of_origin"
df1 <- rename(df1, age_years = age)
df2 <- rename(df2, country_of_origin = country)
# PRINT THE MODIFIED COLUMN NAMES WHEN DONE
names(df1)
names(df2)
#INSERT CODE TO CONVERT TYPECAST "housing_payment_pesos" AS TYPE "FLOAT"
df2$housing_payment_pesos <- as.numeric(df2$housing_payment_pesos)
#INSERT CODE TO CONVERT "housing_payment_pesos" to USD
# 1 Mexican Peso = 0.050 USD
# 1 USD = 19.88 Mexican Peso
df2$housing_payment_pesos <- df2$housing_payment_pesos * 0.05
#INSERT CODE TO RENAME "housing_payment_pesos" to "housing_payment_usd"
df2 <- rename(df2, housing_payment_usd = housing_payment_pesos)
# PRINT THE MODIFIED DATA FRAME
df2
## RUN THE FOLLOWING CELL TO REMOVE ANY WHITE SPACE FROM "country_of_origin"
df2$country_of_origin <- gsub(" ", "", df2$country_of_origin)
# USE THE FOLLOWING CODE TO MAKE SURE ALL "US" TAGS equal "usa" and all "MEX" tags equal "mex"
df2$country_of_origin[grepl('us', tolower(df2$country_of_origin))] <- 'usa'
df2$country_of_origin[!grepl('us', tolower(df2$country_of_origin))] <- 'mex'
# PRINT THE DATA FRAME
df2
# INSERT CODE TO DO AN "OUTER" JOIN FOR THE TWO DATA-FRAMES USING "CUSTOMER_ID" AS COMMON KEY
# (hint .. see lecture slides)
df <- merge(df1, df2, all=T)
df
# INSERT CODE TO: REPLACE ALL CELLS THAT ARE ENTIRELY SPACE (OR EMPTY) WITH NAN
# (use google to figure out how to do this)
# ref:
# https://stackoverflow.com/questions/13445241/replacing-blank-values-white-space-with-nan-in-pandas
# https://cheatography.com/davechild/cheat-sheets/regular-expressions/
df[df == ''] <- NaN
df[is.na(df)] <- NaN
df
# INSERT CODE TO PRINT THE SHAPE OF THE NEW DATAFRAME
dim(df)
# INSERT CODE TO COUNT THE NUMBER OF MISSING VALUES IN EACH COLUMN (use google)
# ref: https://www.statology.org/r-find-missing-values/
sum(sapply(df, function(x) sum(is.nan(x))))
# INSERT CODE TO PRINT THE COLUMN NAMES
names(df)
### INSERT CODE TO REMOVE THE COLUMNS "initials" AND "num_children"
df <- subset(df, select=-c(initials, num_children))
# INSERT CODE TO PRINT THE NEW DATA-FRAME AND ITS SHAPE
df
# INSERT CODE TO PRINT THE NEW DATA-FRAME'S SHAPE
dim(df)
## INSERT CODE TO REPLACE THE STRING "nan" WITH NAN, PRINT THE NEW DATA-FRAME WHEN DONE
df[df=='nan'] <- NaN
## RUN THE FOLLOWING CODE, THIS USES A CONDITIONAL TO ONLY KEEP ROWS WHERE "age_years"!=NaN
df <- df[!is.na(df$age_years),]
## INSERT CODE TO REPLACE ANY NEGATIVE "age_years" WITH NUMPY "NaN" OBJECT
## There are multiple ways to  this, for example you can iterate over the
# rows and use apply with a lamdobda function to enforce the conditional
# see the "usa" lambda function example above
df$age_years[df$age_years < 0] <- NaN
## RUN THE FOLLOWING CELL TO REMOVE ANY WHITE SPACE FROM "yearly_income_usd"
df$yearly_income_usd <- gsub(" ", "", df$yearly_income_usd)
## INSERT CODE TO REPLACE ANY "yearly_income_usd" THAT IS A STRING WITH NUMPY nan OBJECT
df$yearly_income_usd <- as.numeric(df$yearly_income_usd)
df[is.na(df)] <- NaN
# PRINT THE DATA FRAME
df
# INSERT CODE TO THROW AWAY ANY ROW WITH "NaN"
# JUST PRINT THE OUTPUT, DONT RE-DEFINE THE DATAFRAME
# hint: read the documentation https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.dropna.html
drop_na(df)
# SOMETIME PANDAS READS COLUMNS IN AS STRINGS RATHER THAN NUMBERS
# INSERT CODE TO TYPE-CAST ALL OF THE FOLLOWING COLUMNS AS FLOATS
# ["customer_id","age_years","account_balance_usd","yearly_income_usd","housing_payment_usd"]
df <- df %>% mutate_at(c("customer_id","age_years","account_balance_usd","yearly_income_usd","housing_payment_usd"), as.numeric)
for(col in c("customer_id","age_years","account_balance_usd","yearly_income_usd","housing_payment_usd")){
df$col <- as.numeric(df$col)
}
df
library(tidyverse)
# INSERT CODE TO READ THE DATA FILES (hint .. google --> "how to read csv file with pandas")
df1 <- read_csv("./data/example-1.csv")
df2 <- read_csv("./data/example-2.csv")
df1
df2
# LOOK AT FIRST COUPLE LINES
head(df1, 2)
head(df2, 2)
# LOOK AT LAST COUPLE LINES
tail(df1, 2)
tail(df2, 2)
## INSERT CODE TO REMOVE SPACES FROM COLUMN NAMES
names(df1) <- gsub(" ", "", names(df1))
names(df2) <- gsub(" ", "", names(df2))
# INSERT CODE TO RENAME THE COLUMN NAME "age" --> "age_years" and "country" as "country_of_origin"
df1 <- rename(df1, age_years = age)
df2 <- rename(df2, country_of_origin = country)
# PRINT THE MODIFIED COLUMN NAMES WHEN DONE
names(df1)
names(df2)
#INSERT CODE TO CONVERT TYPECAST "housing_payment_pesos" AS TYPE "FLOAT"
df2$housing_payment_pesos <- as.numeric(df2$housing_payment_pesos)
#INSERT CODE TO CONVERT "housing_payment_pesos" to USD
# 1 Mexican Peso = 0.050 USD
# 1 USD = 19.88 Mexican Peso
df2$housing_payment_pesos <- df2$housing_payment_pesos * 0.05
#INSERT CODE TO RENAME "housing_payment_pesos" to "housing_payment_usd"
df2 <- rename(df2, housing_payment_usd = housing_payment_pesos)
# PRINT THE MODIFIED DATA FRAME
df2
## RUN THE FOLLOWING CELL TO REMOVE ANY WHITE SPACE FROM "country_of_origin"
df2$country_of_origin <- gsub(" ", "", df2$country_of_origin)
# USE THE FOLLOWING CODE TO MAKE SURE ALL "US" TAGS equal "usa" and all "MEX" tags equal "mex"
df2$country_of_origin[grepl('us', tolower(df2$country_of_origin))] <- 'usa'
df2$country_of_origin[!grepl('us', tolower(df2$country_of_origin))] <- 'mex'
# PRINT THE DATA FRAME
df2
# INSERT CODE TO DO AN "OUTER" JOIN FOR THE TWO DATA-FRAMES USING "CUSTOMER_ID" AS COMMON KEY
# (hint .. see lecture slides)
df <- merge(df1, df2, all=T)
df
# INSERT CODE TO: REPLACE ALL CELLS THAT ARE ENTIRELY SPACE (OR EMPTY) WITH NAN
# (use google to figure out how to do this)
# ref:
# https://stackoverflow.com/questions/13445241/replacing-blank-values-white-space-with-nan-in-pandas
# https://cheatography.com/davechild/cheat-sheets/regular-expressions/
df[df == ''] <- NaN
df[is.na(df)] <- NaN
df
# INSERT CODE TO PRINT THE SHAPE OF THE NEW DATAFRAME
dim(df)
# INSERT CODE TO COUNT THE NUMBER OF MISSING VALUES IN EACH COLUMN (use google)
# ref: https://www.statology.org/r-find-missing-values/
sum(sapply(df, function(x) sum(is.nan(x))))
# INSERT CODE TO PRINT THE COLUMN NAMES
names(df)
### INSERT CODE TO REMOVE THE COLUMNS "initials" AND "num_children"
df <- subset(df, select=-c(initials, num_children))
# INSERT CODE TO PRINT THE NEW DATA-FRAME AND ITS SHAPE
df
# INSERT CODE TO PRINT THE NEW DATA-FRAME'S SHAPE
dim(df)
## INSERT CODE TO REPLACE THE STRING "nan" WITH NAN, PRINT THE NEW DATA-FRAME WHEN DONE
df[df=='nan'] <- NaN
## RUN THE FOLLOWING CODE, THIS USES A CONDITIONAL TO ONLY KEEP ROWS WHERE "age_years"!=NaN
df <- df[!is.na(df$age_years),]
## INSERT CODE TO REPLACE ANY NEGATIVE "age_years" WITH NUMPY "NaN" OBJECT
## There are multiple ways to  this, for example you can iterate over the
# rows and use apply with a lamdobda function to enforce the conditional
# see the "usa" lambda function example above
df$age_years[df$age_years < 0] <- NaN
## RUN THE FOLLOWING CELL TO REMOVE ANY WHITE SPACE FROM "yearly_income_usd"
df$yearly_income_usd <- gsub(" ", "", df$yearly_income_usd)
## INSERT CODE TO REPLACE ANY "yearly_income_usd" THAT IS A STRING WITH NUMPY nan OBJECT
df$yearly_income_usd <- as.numeric(df$yearly_income_usd)
df[is.na(df)] <- NaN
# PRINT THE DATA FRAME
df
# INSERT CODE TO THROW AWAY ANY ROW WITH "NaN"
# JUST PRINT THE OUTPUT, DONT RE-DEFINE THE DATAFRAME
# hint: read the documentation https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.dropna.html
drop_na(df)
# SOMETIME PANDAS READS COLUMNS IN AS STRINGS RATHER THAN NUMBERS
# INSERT CODE TO TYPE-CAST ALL OF THE FOLLOWING COLUMNS AS FLOATS
# ["customer_id","age_years","account_balance_usd","yearly_income_usd","housing_payment_usd"]
#df <- df %>% mutate_at(c("customer_id","age_years","account_balance_usd","yearly_income_usd","housing_payment_usd"), as.numeric)
# INSERT CODE TO COMPUTE AND PRINT THE MEAN,MEDIAN, AND STD DOWN THE COLUMNS (DO EACH IN ITS OWN CELL)
# NOTICE THAT ONLY THE NUMERICAL ROWS ARE COMPUTED (YOU CAN IGNORE ANY DEPRECATION WARNINGS)
# print((df[["age_years","account_balance_usd"]]).mean(axis=1))
#MEAN
df.mean(skipna=True)
df %>% mutate_at(c("customer_id","age_years","account_balance_usd","yearly_income_usd","housing_payment_usd"), as.numeric)
# SOMETIME PANDAS READS COLUMNS IN AS STRINGS RATHER THAN NUMBERS
# INSERT CODE TO TYPE-CAST ALL OF THE FOLLOWING COLUMNS AS FLOATS
# ["customer_id","age_years","account_balance_usd","yearly_income_usd","housing_payment_usd"]
df <- df %>% mutate_at(c("customer_id","age_years","account_balance_usd","yearly_income_usd","housing_payment_usd"), as.numeric)
typeof(df$customer_id)
typeof(df$age_years)
typeof(df$account_balance_usd)
typeof(df$yearly_income_usd)
typeof(df$housing_payment_usd)
#MEAN
mean(df)
mean(df)
df %>% summarize_if(is.numeric, mean)
df %>% summarize_if(is.numeric, mean, na.rm=T)
#MEDIAN
df %>% summarize_if(is.numeric, median, na.rm=T)
#MEAN
df %>% summarize_if(is.numeric, mean, na.rm=T)
#MEDIAN
df %>% summarize_if(is.numeric, median, na.rm=T)
#STD
df %>% summarize_if(is.numeric, std, na.rm=T)
?std
??std
#STD
df %>% summarize_if(is.numeric, sd, na.rm=T)
is.nan(df$age_years)
df$age_years[is.nan(df$age_years)]
mean(df$age_years, na.rm=TRUE)
df$age_years[is.nan(df$age_years)] <- mean(df$age_years, na.rm=T)
df$age_years
# INSERT CODE TO REPLACE ANY "NaN" in "age_years" WITH THE AVERAGE
df$age_years[is.nan(df$age_years)] <- mean(df$age_years, na.rm=T)
# INSERT CODE TO REPLACE ANY "NaN" in "yearly_income_usd" WITH THE MEDIAN
df$yearly_income_usd[is.nan(df$yearly_income_usd)] <- median(df$yearly_income_usd, na.rm=T)
# print the dataframe
df
df
# INSERT CODE TO THROW AWAY ANY ROW WITH "NaN"
# THIS TIME RE-DEFINE THE DATAFRAME WITHOUT THE "NaN"
# hint: read the documentation https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.dropna.html
df <- drop_na(df)
# print the dataframe
df
distinct(df)
distinct(df$customer_id)
df %>% distinct(customer_id)
df %>% distinct(customer_id, .keep_all=T)
df
# INSERT CODE TO REMOVE ROWS WITH DUPLICATES IN "customer_id" (KEEP THE FIRST VALUE ENCOUNTERS)
df <- df %>% distinct(customer_id, .keep_all=T)
# PRINT THE DATAFRAME
df
df$housing_payment_usd.sapply(lambda x: (x - mean_housing) / std_housing)
(x - mean_housing) / std_housing)
df$housing_payment_usd.sapply(function(x) (x - mean_housing) / std_housing)
sapply(df$housing_payment_usd, function(x) (x - mean_housing) / std_housing)
# INSERT CODE TO NORMALIZE THE COLUMN "housing_payment_usd"
mean_housing <- mean(df$housing_payment_usd, na.rm=T)
std_housing <- sd(df$housing_payment_usd, na.rm=T)
df['housing_payment_usd'] = df['housing_payment_usd'].apply(lambda x: (x - mean_housing) / std_housing)
df['housing_payment_usd'] = df['housing_payment_usd'].apply(lambda x: (x - mean_housing) / std_housing)
sapply(df$housing_payment_usd, function(x) (x - mean_housing) / std_housing)
# INSERT CODE TO NORMALIZE THE COLUMN "housing_payment_usd"
mean_housing <- mean(df$housing_payment_usd, na.rm=T)
std_housing <- sd(df$housing_payment_usd, na.rm=T)
df$housing_payment_usd <- sapply(df$housing_payment_usd, function(x) (x - mean_housing) / std_housing)
# INSERT CODE TO RENAME THE COLUMN "housing_payment_usd" --> "housing_payment_normalized"
df.rename(columns={'housing_payment_usd' : 'housing_payment_normalized'}, inplace=True)
df$housing_payment_usd
df
# INSERT CODE TO NORMALIZE THE COLUMN "housing_payment_usd"
mean_housing <- mean(df$housing_payment_usd, na.rm=T)
std_housing <- sd(df$housing_payment_usd, na.rm=T)
df$housing_payment_usd <- sapply(df$housing_payment_usd, function(x) (x - mean_housing) / std_housing)
# INSERT CODE TO RENAME THE COLUMN "housing_payment_usd" --> "housing_payment_normalized"
df <- rename(df, housing_payment_normalized = housing_payment_usd)
# PRINT THE DATA FRAME
df
library(tidyverse)
# INSERT CODE TO READ THE DATA FILES (hint .. google --> "how to read csv file with pandas")
df1 <- read_csv("./data/example-1.csv")
df2 <- read_csv("./data/example-2.csv")
df1
df2
# LOOK AT FIRST COUPLE LINES
head(df1, 2)
head(df2, 2)
# LOOK AT LAST COUPLE LINES
tail(df1, 2)
tail(df2, 2)
## INSERT CODE TO REMOVE SPACES FROM COLUMN NAMES
names(df1) <- gsub(" ", "", names(df1))
names(df2) <- gsub(" ", "", names(df2))
# INSERT CODE TO RENAME THE COLUMN NAME "age" --> "age_years" and "country" as "country_of_origin"
df1 <- rename(df1, age_years = age)
df2 <- rename(df2, country_of_origin = country)
# PRINT THE MODIFIED COLUMN NAMES WHEN DONE
names(df1)
names(df2)
#INSERT CODE TO CONVERT TYPECAST "housing_payment_pesos" AS TYPE "FLOAT"
df2$housing_payment_pesos <- as.numeric(df2$housing_payment_pesos)
#INSERT CODE TO CONVERT "housing_payment_pesos" to USD
# 1 Mexican Peso = 0.050 USD
# 1 USD = 19.88 Mexican Peso
df2$housing_payment_pesos <- df2$housing_payment_pesos * 0.05
#INSERT CODE TO RENAME "housing_payment_pesos" to "housing_payment_usd"
df2 <- rename(df2, housing_payment_usd = housing_payment_pesos)
# PRINT THE MODIFIED DATA FRAME
df2
## RUN THE FOLLOWING CELL TO REMOVE ANY WHITE SPACE FROM "country_of_origin"
df2$country_of_origin <- gsub(" ", "", df2$country_of_origin)
# USE THE FOLLOWING CODE TO MAKE SURE ALL "US" TAGS equal "usa" and all "MEX" tags equal "mex"
df2$country_of_origin[grepl('us', tolower(df2$country_of_origin))] <- 'usa'
df2$country_of_origin[!grepl('us', tolower(df2$country_of_origin))] <- 'mex'
# PRINT THE DATA FRAME
df2
# INSERT CODE TO DO AN "OUTER" JOIN FOR THE TWO DATA-FRAMES USING "CUSTOMER_ID" AS COMMON KEY
# (hint .. see lecture slides)
df <- merge(df1, df2, all=T)
df
# INSERT CODE TO: REPLACE ALL CELLS THAT ARE ENTIRELY SPACE (OR EMPTY) WITH NAN
# (use google to figure out how to do this)
# ref:
# https://stackoverflow.com/questions/13445241/replacing-blank-values-white-space-with-nan-in-pandas
# https://cheatography.com/davechild/cheat-sheets/regular-expressions/
df[df == ''] <- NaN
df[is.na(df)] <- NaN
df
# INSERT CODE TO PRINT THE SHAPE OF THE NEW DATAFRAME
dim(df)
# INSERT CODE TO COUNT THE NUMBER OF MISSING VALUES IN EACH COLUMN (use google)
# ref: https://www.statology.org/r-find-missing-values/
sum(sapply(df, function(x) sum(is.nan(x))))
# INSERT CODE TO PRINT THE COLUMN NAMES
names(df)
### INSERT CODE TO REMOVE THE COLUMNS "initials" AND "num_children"
df <- subset(df, select=-c(initials, num_children))
# INSERT CODE TO PRINT THE NEW DATA-FRAME AND ITS SHAPE
df
# INSERT CODE TO PRINT THE NEW DATA-FRAME'S SHAPE
dim(df)
## INSERT CODE TO REPLACE THE STRING "nan" WITH NAN, PRINT THE NEW DATA-FRAME WHEN DONE
df[df=='nan'] <- NaN
## RUN THE FOLLOWING CODE, THIS USES A CONDITIONAL TO ONLY KEEP ROWS WHERE "age_years"!=NaN
df <- df[!is.na(df$age_years),]
## INSERT CODE TO REPLACE ANY NEGATIVE "age_years" WITH NUMPY "NaN" OBJECT
## There are multiple ways to  this, for example you can iterate over the
# rows and use apply with a lamdobda function to enforce the conditional
# see the "usa" lambda function example above
df$age_years[df$age_years < 0] <- NaN
## RUN THE FOLLOWING CELL TO REMOVE ANY WHITE SPACE FROM "yearly_income_usd"
df$yearly_income_usd <- gsub(" ", "", df$yearly_income_usd)
## INSERT CODE TO REPLACE ANY "yearly_income_usd" THAT IS A STRING WITH NUMPY nan OBJECT
df$yearly_income_usd <- as.numeric(df$yearly_income_usd)
df[is.na(df)] <- NaN
# PRINT THE DATA FRAME
df
# INSERT CODE TO THROW AWAY ANY ROW WITH "NaN"
# JUST PRINT THE OUTPUT, DONT RE-DEFINE THE DATAFRAME
# hint: read the documentation https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.dropna.html
drop_na(df)
# SOMETIME PANDAS READS COLUMNS IN AS STRINGS RATHER THAN NUMBERS
# INSERT CODE TO TYPE-CAST ALL OF THE FOLLOWING COLUMNS AS FLOATS
# ["customer_id","age_years","account_balance_usd","yearly_income_usd","housing_payment_usd"]
df <- df %>% mutate_at(c("customer_id","age_years","account_balance_usd","yearly_income_usd","housing_payment_usd"), as.numeric)
# INSERT CODE TO COMPUTE AND PRINT THE MEAN,MEDIAN, AND STD DOWN THE COLUMNS (DO EACH IN ITS OWN CELL)
# NOTICE THAT ONLY THE NUMERICAL ROWS ARE COMPUTED (YOU CAN IGNORE ANY DEPRECATION WARNINGS)
# print((df[["age_years","account_balance_usd"]]).mean(axis=1))
#MEAN
df %>% summarize_if(is.numeric, mean, na.rm=T)
#MEDIAN
df %>% summarize_if(is.numeric, median, na.rm=T)
#STD
df %>% summarize_if(is.numeric, sd, na.rm=T)
# INSERT CODE TO REPLACE ANY "NaN" in "age_years" WITH THE AVERAGE
df$age_years[is.nan(df$age_years)] <- mean(df$age_years, na.rm=T)
# INSERT CODE TO REPLACE ANY "NaN" in "yearly_income_usd" WITH THE MEDIAN
df$yearly_income_usd[is.nan(df$yearly_income_usd)] <- median(df$yearly_income_usd, na.rm=T)
# print the dataframe
df
# INSERT CODE TO THROW AWAY ANY ROW WITH "NaN"
# THIS TIME RE-DEFINE THE DATAFRAME WITHOUT THE "NaN"
# hint: read the documentation https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.dropna.html
df <- drop_na(df)
# print the dataframe
df
# INSERT CODE TO REMOVE ROWS WITH DUPLICATES IN "customer_id" (KEEP THE FIRST VALUE ENCOUNTERS)
df <- df %>% distinct(customer_id, .keep_all=T)
# PRINT THE DATAFRAME
df
# INSERT CODE TO NORMALIZE THE COLUMN "housing_payment_usd"
mean_housing <- mean(df$housing_payment_usd, na.rm=T)
std_housing <- sd(df$housing_payment_usd, na.rm=T)
df$housing_payment_usd <- sapply(df$housing_payment_usd, function(x) (x - mean_housing) / std_housing)
# INSERT CODE TO RENAME THE COLUMN "housing_payment_usd" --> "housing_payment_normalized"
df <- rename(df, housing_payment_normalized = housing_payment_usd)
# PRINT THE DATA FRAME
df
library(ggplot2)
library(dplyr)
library(naivebayes)
library(klaR)
library(e1071)
library(caret)
library(cvms)
df <- read.csv('../../data/01-modified-data/big_five_final.csv')
df <- df %>% select(-c(1, 2))
df$sex <- as.factor(df$sex)
s <-  sort(sample(nrow(df), nrow(df)*.8))
train <- df[s,]
test <- df[-s,]
nb_model <- naiveBayes(sex ~., data=train)
modelPred <- predict(nb_model, test)
confusion <- table(modelPred, test$sex)
plot(confusion)
p <- predict(nb_model, train, type='prob')
setwd("C:/Users/Dan Lim/Desktop/anly-501-project-5cminsuhlim/codes/03-naive-bayes")
library(ggplot2)
library(dplyr)
library(naivebayes)
library(klaR)
library(e1071)
library(caret)
library(cvms)
df <- read.csv('../../data/01-modified-data/big_five_final.csv')
df <- df %>% select(-c(1, 2))
df$sex <- as.factor(df$sex)
s <-  sort(sample(nrow(df), nrow(df)*.8))
train <- df[s,]
test <- df[-s,]
nb_model <- naiveBayes(sex ~., data=train)
modelPred <- predict(nb_model, test)
confusion <- table(modelPred, test$sex)
plot(confusion)
p <- predict(nb_model, train, type='prob')
p <- predict(nb_model, train)
tab1 <- table(p1, train$admit)
tab1 <- table(p, train$admit)
View(train)
View(df)
View(df)
df <- read.csv('../../data/01-modified-data/big_five_final.csv')
df <- df %>% select(-c(case_id, country))
library(dplyr)
library(tidyverse)
df <- read.csv('../../data/01-modified-data/big_five_final.csv')
df <- df %>% select(-c(case_id, country))
library(dplyr)
library(ggplot2)
install.packages("rlang")
install.packages("rlang")
remove.packages(rlang)
remove.packages('rlang')
install.packages("rlang")
library(ggplot2)
library(dplyr)
library(e1071)
library(caret)
library(cvms)
library(ggplot2)
install.packages('rlang')
remove.packages('rlang')
install.packages('rlang')
library(rlang)
install.packages('rlang')
library(ggplot2)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(ggplot2)
library(dplyr)
library(dplyr)
df <- read.csv('../../data/01-modified-data/big_five_final.csv')
df <- df %>% select(-c(case_id, country))
install.packages('rlang')
remove.packages('rlang')
remove.packages('dplyr')
install.packages("dplyr")
library(tidyverse)
install.packages("dplyr")
