df$age_years[df$age_years < 0] <- NaN
## RUN THE FOLLOWING CELL TO REMOVE ANY WHITE SPACE FROM "yearly_income_usd"
df$yearly_income_usd <- gsub(" ", "", df$yearly_income_usd)
## INSERT CODE TO REPLACE ANY "yearly_income_usd" THAT IS A STRING WITH NUMPY nan OBJECT
df$yearly_income_usd <- as.numeric(df$yearly_income_usd)
df[is.na(df)] <- NaN
# PRINT THE DATA FRAME
df
# INSERT CODE TO THROW AWAY ANY ROW WITH "NaN"
# JUST PRINT THE OUTPUT, DONT RE-DEFINE THE DATAFRAME
# hint: read the documentation https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.dropna.html
drop_na(df)
# SOMETIME PANDAS READS COLUMNS IN AS STRINGS RATHER THAN NUMBERS
# INSERT CODE TO TYPE-CAST ALL OF THE FOLLOWING COLUMNS AS FLOATS
# ["customer_id","age_years","account_balance_usd","yearly_income_usd","housing_payment_usd"]
df <- df %>% mutate_at(c("customer_id","age_years","account_balance_usd","yearly_income_usd","housing_payment_usd"), as.numeric)
for(col in c("customer_id","age_years","account_balance_usd","yearly_income_usd","housing_payment_usd")){
df$col <- as.numeric(df$col)
}
df
library(tidyverse)
# INSERT CODE TO READ THE DATA FILES (hint .. google --> "how to read csv file with pandas")
df1 <- read_csv("./data/example-1.csv")
df2 <- read_csv("./data/example-2.csv")
df1
df2
# LOOK AT FIRST COUPLE LINES
head(df1, 2)
head(df2, 2)
# LOOK AT LAST COUPLE LINES
tail(df1, 2)
tail(df2, 2)
## INSERT CODE TO REMOVE SPACES FROM COLUMN NAMES
names(df1) <- gsub(" ", "", names(df1))
names(df2) <- gsub(" ", "", names(df2))
# INSERT CODE TO RENAME THE COLUMN NAME "age" --> "age_years" and "country" as "country_of_origin"
df1 <- rename(df1, age_years = age)
df2 <- rename(df2, country_of_origin = country)
# PRINT THE MODIFIED COLUMN NAMES WHEN DONE
names(df1)
names(df2)
#INSERT CODE TO CONVERT TYPECAST "housing_payment_pesos" AS TYPE "FLOAT"
df2$housing_payment_pesos <- as.numeric(df2$housing_payment_pesos)
#INSERT CODE TO CONVERT "housing_payment_pesos" to USD
# 1 Mexican Peso = 0.050 USD
# 1 USD = 19.88 Mexican Peso
df2$housing_payment_pesos <- df2$housing_payment_pesos * 0.05
#INSERT CODE TO RENAME "housing_payment_pesos" to "housing_payment_usd"
df2 <- rename(df2, housing_payment_usd = housing_payment_pesos)
# PRINT THE MODIFIED DATA FRAME
df2
## RUN THE FOLLOWING CELL TO REMOVE ANY WHITE SPACE FROM "country_of_origin"
df2$country_of_origin <- gsub(" ", "", df2$country_of_origin)
# USE THE FOLLOWING CODE TO MAKE SURE ALL "US" TAGS equal "usa" and all "MEX" tags equal "mex"
df2$country_of_origin[grepl('us', tolower(df2$country_of_origin))] <- 'usa'
df2$country_of_origin[!grepl('us', tolower(df2$country_of_origin))] <- 'mex'
# PRINT THE DATA FRAME
df2
# INSERT CODE TO DO AN "OUTER" JOIN FOR THE TWO DATA-FRAMES USING "CUSTOMER_ID" AS COMMON KEY
# (hint .. see lecture slides)
df <- merge(df1, df2, all=T)
df
# INSERT CODE TO: REPLACE ALL CELLS THAT ARE ENTIRELY SPACE (OR EMPTY) WITH NAN
# (use google to figure out how to do this)
# ref:
# https://stackoverflow.com/questions/13445241/replacing-blank-values-white-space-with-nan-in-pandas
# https://cheatography.com/davechild/cheat-sheets/regular-expressions/
df[df == ''] <- NaN
df[is.na(df)] <- NaN
df
# INSERT CODE TO PRINT THE SHAPE OF THE NEW DATAFRAME
dim(df)
# INSERT CODE TO COUNT THE NUMBER OF MISSING VALUES IN EACH COLUMN (use google)
# ref: https://www.statology.org/r-find-missing-values/
sum(sapply(df, function(x) sum(is.nan(x))))
# INSERT CODE TO PRINT THE COLUMN NAMES
names(df)
### INSERT CODE TO REMOVE THE COLUMNS "initials" AND "num_children"
df <- subset(df, select=-c(initials, num_children))
# INSERT CODE TO PRINT THE NEW DATA-FRAME AND ITS SHAPE
df
# INSERT CODE TO PRINT THE NEW DATA-FRAME'S SHAPE
dim(df)
## INSERT CODE TO REPLACE THE STRING "nan" WITH NAN, PRINT THE NEW DATA-FRAME WHEN DONE
df[df=='nan'] <- NaN
## RUN THE FOLLOWING CODE, THIS USES A CONDITIONAL TO ONLY KEEP ROWS WHERE "age_years"!=NaN
df <- df[!is.na(df$age_years),]
## INSERT CODE TO REPLACE ANY NEGATIVE "age_years" WITH NUMPY "NaN" OBJECT
## There are multiple ways to  this, for example you can iterate over the
# rows and use apply with a lamdobda function to enforce the conditional
# see the "usa" lambda function example above
df$age_years[df$age_years < 0] <- NaN
## RUN THE FOLLOWING CELL TO REMOVE ANY WHITE SPACE FROM "yearly_income_usd"
df$yearly_income_usd <- gsub(" ", "", df$yearly_income_usd)
## INSERT CODE TO REPLACE ANY "yearly_income_usd" THAT IS A STRING WITH NUMPY nan OBJECT
df$yearly_income_usd <- as.numeric(df$yearly_income_usd)
df[is.na(df)] <- NaN
# PRINT THE DATA FRAME
df
# INSERT CODE TO THROW AWAY ANY ROW WITH "NaN"
# JUST PRINT THE OUTPUT, DONT RE-DEFINE THE DATAFRAME
# hint: read the documentation https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.dropna.html
drop_na(df)
# SOMETIME PANDAS READS COLUMNS IN AS STRINGS RATHER THAN NUMBERS
# INSERT CODE TO TYPE-CAST ALL OF THE FOLLOWING COLUMNS AS FLOATS
# ["customer_id","age_years","account_balance_usd","yearly_income_usd","housing_payment_usd"]
#df <- df %>% mutate_at(c("customer_id","age_years","account_balance_usd","yearly_income_usd","housing_payment_usd"), as.numeric)
# INSERT CODE TO COMPUTE AND PRINT THE MEAN,MEDIAN, AND STD DOWN THE COLUMNS (DO EACH IN ITS OWN CELL)
# NOTICE THAT ONLY THE NUMERICAL ROWS ARE COMPUTED (YOU CAN IGNORE ANY DEPRECATION WARNINGS)
# print((df[["age_years","account_balance_usd"]]).mean(axis=1))
#MEAN
df.mean(skipna=True)
df %>% mutate_at(c("customer_id","age_years","account_balance_usd","yearly_income_usd","housing_payment_usd"), as.numeric)
# SOMETIME PANDAS READS COLUMNS IN AS STRINGS RATHER THAN NUMBERS
# INSERT CODE TO TYPE-CAST ALL OF THE FOLLOWING COLUMNS AS FLOATS
# ["customer_id","age_years","account_balance_usd","yearly_income_usd","housing_payment_usd"]
df <- df %>% mutate_at(c("customer_id","age_years","account_balance_usd","yearly_income_usd","housing_payment_usd"), as.numeric)
typeof(df$customer_id)
typeof(df$age_years)
typeof(df$account_balance_usd)
typeof(df$yearly_income_usd)
typeof(df$housing_payment_usd)
#MEAN
mean(df)
mean(df)
df %>% summarize_if(is.numeric, mean)
df %>% summarize_if(is.numeric, mean, na.rm=T)
#MEDIAN
df %>% summarize_if(is.numeric, median, na.rm=T)
#MEAN
df %>% summarize_if(is.numeric, mean, na.rm=T)
#MEDIAN
df %>% summarize_if(is.numeric, median, na.rm=T)
#STD
df %>% summarize_if(is.numeric, std, na.rm=T)
?std
??std
#STD
df %>% summarize_if(is.numeric, sd, na.rm=T)
is.nan(df$age_years)
df$age_years[is.nan(df$age_years)]
mean(df$age_years, na.rm=TRUE)
df$age_years[is.nan(df$age_years)] <- mean(df$age_years, na.rm=T)
df$age_years
# INSERT CODE TO REPLACE ANY "NaN" in "age_years" WITH THE AVERAGE
df$age_years[is.nan(df$age_years)] <- mean(df$age_years, na.rm=T)
# INSERT CODE TO REPLACE ANY "NaN" in "yearly_income_usd" WITH THE MEDIAN
df$yearly_income_usd[is.nan(df$yearly_income_usd)] <- median(df$yearly_income_usd, na.rm=T)
# print the dataframe
df
df
# INSERT CODE TO THROW AWAY ANY ROW WITH "NaN"
# THIS TIME RE-DEFINE THE DATAFRAME WITHOUT THE "NaN"
# hint: read the documentation https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.dropna.html
df <- drop_na(df)
# print the dataframe
df
distinct(df)
distinct(df$customer_id)
df %>% distinct(customer_id)
df %>% distinct(customer_id, .keep_all=T)
df
# INSERT CODE TO REMOVE ROWS WITH DUPLICATES IN "customer_id" (KEEP THE FIRST VALUE ENCOUNTERS)
df <- df %>% distinct(customer_id, .keep_all=T)
# PRINT THE DATAFRAME
df
df$housing_payment_usd.sapply(lambda x: (x - mean_housing) / std_housing)
(x - mean_housing) / std_housing)
df$housing_payment_usd.sapply(function(x) (x - mean_housing) / std_housing)
sapply(df$housing_payment_usd, function(x) (x - mean_housing) / std_housing)
# INSERT CODE TO NORMALIZE THE COLUMN "housing_payment_usd"
mean_housing <- mean(df$housing_payment_usd, na.rm=T)
std_housing <- sd(df$housing_payment_usd, na.rm=T)
df['housing_payment_usd'] = df['housing_payment_usd'].apply(lambda x: (x - mean_housing) / std_housing)
df['housing_payment_usd'] = df['housing_payment_usd'].apply(lambda x: (x - mean_housing) / std_housing)
sapply(df$housing_payment_usd, function(x) (x - mean_housing) / std_housing)
# INSERT CODE TO NORMALIZE THE COLUMN "housing_payment_usd"
mean_housing <- mean(df$housing_payment_usd, na.rm=T)
std_housing <- sd(df$housing_payment_usd, na.rm=T)
df$housing_payment_usd <- sapply(df$housing_payment_usd, function(x) (x - mean_housing) / std_housing)
# INSERT CODE TO RENAME THE COLUMN "housing_payment_usd" --> "housing_payment_normalized"
df.rename(columns={'housing_payment_usd' : 'housing_payment_normalized'}, inplace=True)
df$housing_payment_usd
df
# INSERT CODE TO NORMALIZE THE COLUMN "housing_payment_usd"
mean_housing <- mean(df$housing_payment_usd, na.rm=T)
std_housing <- sd(df$housing_payment_usd, na.rm=T)
df$housing_payment_usd <- sapply(df$housing_payment_usd, function(x) (x - mean_housing) / std_housing)
# INSERT CODE TO RENAME THE COLUMN "housing_payment_usd" --> "housing_payment_normalized"
df <- rename(df, housing_payment_normalized = housing_payment_usd)
# PRINT THE DATA FRAME
df
library(tidyverse)
# INSERT CODE TO READ THE DATA FILES (hint .. google --> "how to read csv file with pandas")
df1 <- read_csv("./data/example-1.csv")
df2 <- read_csv("./data/example-2.csv")
df1
df2
# LOOK AT FIRST COUPLE LINES
head(df1, 2)
head(df2, 2)
# LOOK AT LAST COUPLE LINES
tail(df1, 2)
tail(df2, 2)
## INSERT CODE TO REMOVE SPACES FROM COLUMN NAMES
names(df1) <- gsub(" ", "", names(df1))
names(df2) <- gsub(" ", "", names(df2))
# INSERT CODE TO RENAME THE COLUMN NAME "age" --> "age_years" and "country" as "country_of_origin"
df1 <- rename(df1, age_years = age)
df2 <- rename(df2, country_of_origin = country)
# PRINT THE MODIFIED COLUMN NAMES WHEN DONE
names(df1)
names(df2)
#INSERT CODE TO CONVERT TYPECAST "housing_payment_pesos" AS TYPE "FLOAT"
df2$housing_payment_pesos <- as.numeric(df2$housing_payment_pesos)
#INSERT CODE TO CONVERT "housing_payment_pesos" to USD
# 1 Mexican Peso = 0.050 USD
# 1 USD = 19.88 Mexican Peso
df2$housing_payment_pesos <- df2$housing_payment_pesos * 0.05
#INSERT CODE TO RENAME "housing_payment_pesos" to "housing_payment_usd"
df2 <- rename(df2, housing_payment_usd = housing_payment_pesos)
# PRINT THE MODIFIED DATA FRAME
df2
## RUN THE FOLLOWING CELL TO REMOVE ANY WHITE SPACE FROM "country_of_origin"
df2$country_of_origin <- gsub(" ", "", df2$country_of_origin)
# USE THE FOLLOWING CODE TO MAKE SURE ALL "US" TAGS equal "usa" and all "MEX" tags equal "mex"
df2$country_of_origin[grepl('us', tolower(df2$country_of_origin))] <- 'usa'
df2$country_of_origin[!grepl('us', tolower(df2$country_of_origin))] <- 'mex'
# PRINT THE DATA FRAME
df2
# INSERT CODE TO DO AN "OUTER" JOIN FOR THE TWO DATA-FRAMES USING "CUSTOMER_ID" AS COMMON KEY
# (hint .. see lecture slides)
df <- merge(df1, df2, all=T)
df
# INSERT CODE TO: REPLACE ALL CELLS THAT ARE ENTIRELY SPACE (OR EMPTY) WITH NAN
# (use google to figure out how to do this)
# ref:
# https://stackoverflow.com/questions/13445241/replacing-blank-values-white-space-with-nan-in-pandas
# https://cheatography.com/davechild/cheat-sheets/regular-expressions/
df[df == ''] <- NaN
df[is.na(df)] <- NaN
df
# INSERT CODE TO PRINT THE SHAPE OF THE NEW DATAFRAME
dim(df)
# INSERT CODE TO COUNT THE NUMBER OF MISSING VALUES IN EACH COLUMN (use google)
# ref: https://www.statology.org/r-find-missing-values/
sum(sapply(df, function(x) sum(is.nan(x))))
# INSERT CODE TO PRINT THE COLUMN NAMES
names(df)
### INSERT CODE TO REMOVE THE COLUMNS "initials" AND "num_children"
df <- subset(df, select=-c(initials, num_children))
# INSERT CODE TO PRINT THE NEW DATA-FRAME AND ITS SHAPE
df
# INSERT CODE TO PRINT THE NEW DATA-FRAME'S SHAPE
dim(df)
## INSERT CODE TO REPLACE THE STRING "nan" WITH NAN, PRINT THE NEW DATA-FRAME WHEN DONE
df[df=='nan'] <- NaN
## RUN THE FOLLOWING CODE, THIS USES A CONDITIONAL TO ONLY KEEP ROWS WHERE "age_years"!=NaN
df <- df[!is.na(df$age_years),]
## INSERT CODE TO REPLACE ANY NEGATIVE "age_years" WITH NUMPY "NaN" OBJECT
## There are multiple ways to  this, for example you can iterate over the
# rows and use apply with a lamdobda function to enforce the conditional
# see the "usa" lambda function example above
df$age_years[df$age_years < 0] <- NaN
## RUN THE FOLLOWING CELL TO REMOVE ANY WHITE SPACE FROM "yearly_income_usd"
df$yearly_income_usd <- gsub(" ", "", df$yearly_income_usd)
## INSERT CODE TO REPLACE ANY "yearly_income_usd" THAT IS A STRING WITH NUMPY nan OBJECT
df$yearly_income_usd <- as.numeric(df$yearly_income_usd)
df[is.na(df)] <- NaN
# PRINT THE DATA FRAME
df
# INSERT CODE TO THROW AWAY ANY ROW WITH "NaN"
# JUST PRINT THE OUTPUT, DONT RE-DEFINE THE DATAFRAME
# hint: read the documentation https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.dropna.html
drop_na(df)
# SOMETIME PANDAS READS COLUMNS IN AS STRINGS RATHER THAN NUMBERS
# INSERT CODE TO TYPE-CAST ALL OF THE FOLLOWING COLUMNS AS FLOATS
# ["customer_id","age_years","account_balance_usd","yearly_income_usd","housing_payment_usd"]
df <- df %>% mutate_at(c("customer_id","age_years","account_balance_usd","yearly_income_usd","housing_payment_usd"), as.numeric)
# INSERT CODE TO COMPUTE AND PRINT THE MEAN,MEDIAN, AND STD DOWN THE COLUMNS (DO EACH IN ITS OWN CELL)
# NOTICE THAT ONLY THE NUMERICAL ROWS ARE COMPUTED (YOU CAN IGNORE ANY DEPRECATION WARNINGS)
# print((df[["age_years","account_balance_usd"]]).mean(axis=1))
#MEAN
df %>% summarize_if(is.numeric, mean, na.rm=T)
#MEDIAN
df %>% summarize_if(is.numeric, median, na.rm=T)
#STD
df %>% summarize_if(is.numeric, sd, na.rm=T)
# INSERT CODE TO REPLACE ANY "NaN" in "age_years" WITH THE AVERAGE
df$age_years[is.nan(df$age_years)] <- mean(df$age_years, na.rm=T)
# INSERT CODE TO REPLACE ANY "NaN" in "yearly_income_usd" WITH THE MEDIAN
df$yearly_income_usd[is.nan(df$yearly_income_usd)] <- median(df$yearly_income_usd, na.rm=T)
# print the dataframe
df
# INSERT CODE TO THROW AWAY ANY ROW WITH "NaN"
# THIS TIME RE-DEFINE THE DATAFRAME WITHOUT THE "NaN"
# hint: read the documentation https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.dropna.html
df <- drop_na(df)
# print the dataframe
df
# INSERT CODE TO REMOVE ROWS WITH DUPLICATES IN "customer_id" (KEEP THE FIRST VALUE ENCOUNTERS)
df <- df %>% distinct(customer_id, .keep_all=T)
# PRINT THE DATAFRAME
df
# INSERT CODE TO NORMALIZE THE COLUMN "housing_payment_usd"
mean_housing <- mean(df$housing_payment_usd, na.rm=T)
std_housing <- sd(df$housing_payment_usd, na.rm=T)
df$housing_payment_usd <- sapply(df$housing_payment_usd, function(x) (x - mean_housing) / std_housing)
# INSERT CODE TO RENAME THE COLUMN "housing_payment_usd" --> "housing_payment_normalized"
df <- rename(df, housing_payment_normalized = housing_payment_usd)
# PRINT THE DATA FRAME
df
remove.packages('rlang')
install.packages('rlang')
one.dice <- function(){
dice <- sample(1:6, size = 1, replace = TRUE)
return(dice)
}
one.dice() #what is happening here?? try this several times.
#what is hapening here?
par(mfrow=c(2,2))
for (i in 1:4){
sims <- replicate(100, one.dice())
table(sims)
table(sims)/length(sims)
plot(table(sims), xlab = 'Event', ylab = 'Frequency')
}
#what is hapening here?
par(mfrow=c(2,2))
for (i in 1:4){
sims <- replicate(10000, one.dice())
table(sims)
table(sims)/length(sims)
plot(table(sims), xlab = 'Event', ylab = 'Frequency')
}
dev.off()
dmultinom(x=c(1,2,0), prob = c(0.6,0.2,0.2))
set.seed(123)
my_prob <- c(0.6, 0.2, 0.2)
number_of_experiments <- 10000
number_of_samples <- 10
experiments <- rmultinom(n=number_of_experiments, size=number_of_samples, prob=my_prob)
df <- data.frame(experiments)
dfM <- data.frame(experiments)/number_of_samples
hist(dfM[, 1])
library(tidyverse)
library(mvtnorm)
library(plotly)
library(MASS)
library(ggplot2)
sigma <- matrix(c(4,2,2,3), ncol = 2)
sigma
means <- c(0, 0)
n <- 1000
set.seed(42)
x <- rmvnorm(n = n, mean = means, sigma = sigma)
str(x)
head(x)
d <- data.frame(x)
names(d)
## marginal of X1
d %>%
ggplot(aes(x = X1)) +
geom_density()
p1 <- data_frame(x = -3:3) %>%
ggplot(aes(x = x)) +
stat_function(fun = dnorm, n = n)
p1
p2 <- ggplot(d, aes(x = X1, y = X2)) +
geom_point(alpha = .5) +
geom_density_2d()
p2
p3 <- ggplot(d, aes(x = X1, y = X2)) +
geom_point(alpha = .5) +
geom_bin2d() +
scale_fill_viridis_c()
p3
(p <- plot_ly(d, x = ~X1, y = ~X2))
add_histogram2d(p)
add_histogram2dcontour(p)
dens <- kde2d(d$X1, d$X2)
plot_ly(x = dens$x,
y = dens$y,
z = dens$z) %>% add_surface()
d$dens <- dmvnorm(x = d)
p4 <- plot_ly(d, x = ~ X1, y = ~ X2, z = ~ dens,
marker = list(color = ~ dens,
showscale = TRUE)) %>%
add_markers()
p4
dens <- kde2d(d$X1, d$X2)
plot_ly(x = dens$x,
y = dens$y,
z = dens$z) %>% add_surface()
add_histogram2dcontour(p)
dens <- kde2d(d$X1, d$X2)
plot_ly(x = dens$x,
y = dens$y,
z = dens$z) %>% add_surface()
add_histogram2dcontour(p)
d$dens <- dmvnorm(x = d)
p4 <- plot_ly(d, x = ~ X1, y = ~ X2, z = ~ dens,
marker = list(color = ~ dens,
showscale = TRUE)) %>%
add_markers()
p4
(p <- plot_ly(d, x = ~X1, y = ~X2))
add_histogram2d(p)
p4 <- plot_ly(d, x = ~ X1, y = ~ X2, z = ~ dens,
marker = list(color = ~ dens,
showscale = TRUE)) %>%
add_markers()
p4
?pbinom
rnorm(10000, 272, 13.4)
x <- rnorm(10000, 272, 13.4)
length(X < 290)
length(x < 290 & x > 250)
length(x)
length(x < 290)
df <- data.frame(X = rnorm(10000, 272, 13.4))
length(df[df$X < 290 & df$X > 250,]$X)/length(df$X)
df$X < 290
length(df$X)
df[df$X < 290,]
df[df$X < 290,]$X
length(df[df$X < 290 & df$X > 250,])/length(df$X)
pbinom(290, 800, 0.34) - pbinom(250, 800, 0.34)
?rexp
setwd("C:/Users/Dan Lim/Desktop/anly-501-project-5cminsuhlim/codes/03-naive-bayes")
library(ggplot2)
library(tidyverse)
library(e1071)
library(caTools)
library(caret)
library(naivebayes)
df <- read.csv('../../data/01-modified-data/big_five_final.csv')
df <- df %>% select(-c(age, case_id, country)) %>%
mutate(sex = factor(ifelse(sex == 1, 'Male', 'Female')))
df$sex <- as.factor(df$sex)
df_m <- df %>% filter(sex=='Male')
df_f <- df %>% filter(sex=='Female')
set.seed(123)
## ref: https://www.learnbymarketing.com/tutorials/naive-bayes-in-r/
split <- sample.split(df, SplitRatio=0.8)
train_m <- subset(df_m, split=='TRUE')
test_m <- subset(df_m, split=='FALSE')
train_f <- subset(df_f, split=='TRUE')
test_f <- subset(df_f, split=='FALSE')
train <- rbind(train_m, train_f)
test <- rbind(test_m, test_f)
classifier <- naiveBayes(sex ~ ., data=train)
modelPred <- predict(classifier, test)
confusion <- table(modelPred, test$sex)
confusionMatrix(confusion)
## ref: https://stackoverflow.com/questions/37897252/plot-confusion-matrix-in-r-using-ggplot
Target <- factor(c('Male', 'Male', 'Female', 'Female'))
Prediction <- factor(c(0, 1, 0, 1))
Y      <- c(18287, 8375, 39694, 4519)
df <- data.frame(Target, Prediction, Y)
ggplot(df, aes(x = Target, y = Prediction)) +
geom_tile(aes(fill = Y), color = "white") +
geom_text(aes(label = sprintf("%1.0f", Y)), vjust = 1) +
scale_fill_gradient(low = "lightblue", high = "salmon") +
scale_x_discrete(labels=c("Female","Male")) +
scale_y_discrete(labels=c("Female","Male")) +
labs(title = 'Confusion Matrix') +
theme_bw() +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5))
View(df)
View(classifier)
train
View(train)
big5 <- NaiveBayes(as.factor(sex) ~., data=train)
library(naivebayes)
big5 <- NaiveBayes(as.factor(sex) ~., data=train)
??naivebayes
big5 <- naive_bayes(as.factor(sex) ~., data=train)
colnames(train)
plot(big5, vars = c("agreeable_score","extraversion_score","openness_score",
"conscientiousness_score","neuroticism_score"))
View(train)
X1 <- rexp(3)
X2 <- rexp(3)
X3 <- rexp(3)
X1 <- rexp(3)
X2 <- rexp(3)
X3 <- rexp(3)
theta_1 <- X1
theta_2 <- (X1 + X2) / 2
theta_3 <- (X1 + 2 * X2) / 3
mean(theta_1) - mean(X1)
mean(theta_2) - mean(X1)
mean(theta_2) - mean(X1) - mean(X2)
mean(theta_2)
X2
mean(x2)
mean(X2)
mean(X1)
mean(theta_2)
mean(theta_3)
mean(theta_2) - (mean(X1) + mean(X2)) / 2
mean(theta_3) - (mean(X1) + 2 * mean(X2)) / 3
v3 <- var(X3)
v1 <- var(X1)
v2 <- var(X2)
v1 / v2
v1 / v3
v2 / v3
v1
v2
v3
