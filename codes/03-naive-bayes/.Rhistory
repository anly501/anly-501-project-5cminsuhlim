theme_bw() + theme(legend.position = "none")
Target <- factor(c('Male', 'Female'))
Prediction <- factor(c(0, 1, 0, 1))
Y      <- c(2816, 248, 34, 235)
df <- data.frame(TClass, PClass, Y)
ggplot(data =  df, mapping = aes(x = Target, y = Prediction)) +
geom_tile(aes(fill = Y), colour = "white") +
geom_text(aes(label = sprintf("%1.0f", Y)), vjust = 1) +
scale_fill_gradient(low = "blue", high = "red") +
theme_bw() + theme(legend.position = "none")
Target <- factor(c('Male', 'Male', 'Female', 'Female'))
Prediction <- factor(c(0, 1, 0, 1))
Y      <- c(2816, 248, 34, 235)
df <- data.frame(TClass, PClass, Y)
ggplot(data =  df, mapping = aes(x = Target, y = Prediction)) +
geom_tile(aes(fill = Y), colour = "white") +
geom_text(aes(label = sprintf("%1.0f", Y)), vjust = 1) +
scale_fill_gradient(low = "blue", high = "red") +
theme_bw() + theme(legend.position = "none")
df <- data.frame(Target, Prediction, Y)
ggplot(data =  df, mapping = aes(x = Target, y = Prediction)) +
geom_tile(aes(fill = Y), colour = "white") +
geom_text(aes(label = sprintf("%1.0f", Y)), vjust = 1) +
scale_fill_gradient(low = "blue", high = "red") +
theme_bw() + theme(legend.position = "none")
Target <- factor(c('Male', 'Male', 'Female', 'Female'))
Prediction <- factor(c(0, 1, 0, 1))
Y      <- c(14201, 26241, 7733, 54263)
df <- data.frame(Target, Prediction, Y)
ggplot(data =  df, mapping = aes(x = Target, y = Prediction)) +
geom_tile(aes(fill = Y), colour = "white") +
geom_text(aes(label = sprintf("%1.0f", Y)), vjust = 1) +
scale_fill_gradient(low = "blue", high = "red") +
theme_bw() + theme(legend.position = "none")
Prediction <- factor(c(0, 1, 1, 0))
Y      <- c(14201, 26241, 7733, 54263)
df <- data.frame(Target, Prediction, Y)
ggplot(data =  df, mapping = aes(x = Target, y = Prediction)) +
geom_tile(aes(fill = Y), colour = "white") +
geom_text(aes(label = sprintf("%1.0f", Y)), vjust = 1) +
scale_fill_gradient(low = "blue", high = "red") +
theme_bw() + theme(legend.position = "none")
Target <- factor(c('Male', 'Male', 'Female', 'Female'))
Prediction <- factor(c(0, 1, 0, 1))
Y      <- c(14201, 26241, 7733, 54263)
df <- data.frame(Target, Prediction, Y)
ggplot(data =  df, mapping = aes(x = Target, y = Prediction)) +
geom_tile(aes(fill = Y), colour = "white") +
geom_text(aes(label = sprintf("%1.0f", Y)), vjust = 1) +
scale_fill_gradient(low = "blue", high = "red") +
theme_bw() + theme(legend.position = "none")
ggplot(df, aes(x = Target, y = Prediction)) +
geom_tile(aes(fill = Y), color = "white") +
geom_text(aes(label = sprintf("%1.0f", Y)), vjust = 1) +
scale_fill_gradient(low = "blue", high = "red") +
theme_bw() + theme(legend.position = "none")
View(df)
View(df)
View(df)
ggplot(df, aes(x = Target, y = Prediction)) +
geom_tile(aes(fill = Y), color = "white") +
geom_text(aes(label = sprintf("%1.0f", Y)), vjust = 1) +
scale_fill_gradient(low = "blue", high = "red") +
scale_x_discrete(labels=c("Class_1","Class_2","Class_3","Class_4")) +
scale_y_discrete(labels=c("Class_4","Class_3","Class_2","Class_1"))
ggplot(df, aes(x = Target, y = Prediction)) +
geom_tile(aes(fill = Y), color = "white") +
geom_text(aes(label = sprintf("%1.0f", Y)), vjust = 1) +
scale_fill_gradient(low = "blue", high = "red") +
scale_x_discrete(labels=c("Female","Male")) +
scale_y_discrete(labels=c("Male","Female"))
ggplot(df, aes(x = Target, y = Prediction)) +
geom_tile(aes(fill = Y), color = "white") +
geom_text(aes(label = sprintf("%1.0f", Y)), vjust = 1) +
scale_fill_gradient(low = "blue", high = "red") +
scale_x_discrete(labels=c("Female","Male")) +
scale_y_discrete(labels=c("Female","Male"))
Target <- factor(c('Male', 'Male', 'Female', 'Female'))
Prediction <- factor(c(0, 1, 0, 1))
Y      <- c(7733, 14201, 54263, 26241)
df <- data.frame(Target, Prediction, Y)
ggplot(df, aes(x = Target, y = Prediction)) +
geom_tile(aes(fill = Y), color = "white") +
geom_text(aes(label = sprintf("%1.0f", Y)), vjust = 1) +
scale_fill_gradient(low = "blue", high = "red") +
scale_x_discrete(labels=c("Female","Male")) +
scale_y_discrete(labels=c("Female","Male"))
ggplot(df, aes(x = Target, y = Prediction)) +
geom_tile(aes(fill = Y), color = "white") +
geom_text(aes(label = sprintf("%1.0f", Y)), vjust = 1) +
scale_fill_gradient(low = "blue", high = "red") +
scale_x_discrete(labels=c("Female","Male")) +
scale_y_discrete(labels=c("Female","Male")) +
theme_bw() +
theme(legend.position = "none")
Y      <- c(14201, 7733, 54263, 26241)
df <- data.frame(Target, Prediction, Y)
ggplot(df, aes(x = Target, y = Prediction)) +
geom_tile(aes(fill = Y), color = "white") +
geom_text(aes(label = sprintf("%1.0f", Y)), vjust = 1) +
scale_fill_gradient(low = "blue", high = "red") +
scale_x_discrete(labels=c("Female","Male")) +
scale_y_discrete(labels=c("Female","Male")) +
theme_bw() +
theme(legend.position = "none")
Y      <- c(7733, 14201, 54263, 26241)
df <- data.frame(Target, Prediction, Y)
ggplot(df, aes(x = Target, y = Prediction)) +
geom_tile(aes(fill = Y), color = "white") +
geom_text(aes(label = sprintf("%1.0f", Y)), vjust = 1) +
scale_fill_gradient(low = "blue", high = "red") +
scale_x_discrete(labels=c("Female","Male")) +
scale_y_discrete(labels=c("Female","Male")) +
theme_bw() +
theme(legend.position = "none")
Y      <- c(14201, 7733, 54263, 26241)
df <- data.frame(Target, Prediction, Y)
ggplot(df, aes(x = Target, y = Prediction)) +
geom_tile(aes(fill = Y), color = "white") +
geom_text(aes(label = sprintf("%1.0f", Y)), vjust = 1) +
scale_fill_gradient(low = "blue", high = "red") +
scale_x_discrete(labels=c("Female","Male")) +
scale_y_discrete(labels=c("Female","Male")) +
theme_bw() +
theme(legend.position = "none")
Y      <- c(7733, 54263, 7733, 26241)
df <- data.frame(Target, Prediction, Y)
ggplot(df, aes(x = Target, y = Prediction)) +
geom_tile(aes(fill = Y), color = "white") +
geom_text(aes(label = sprintf("%1.0f", Y)), vjust = 1) +
scale_fill_gradient(low = "blue", high = "red") +
scale_x_discrete(labels=c("Female","Male")) +
scale_y_discrete(labels=c("Female","Male")) +
theme_bw() +
theme(legend.position = "none")
Y      <- c(7733, 54263, 26241, 14201)
df <- data.frame(Target, Prediction, Y)
ggplot(df, aes(x = Target, y = Prediction)) +
geom_tile(aes(fill = Y), color = "white") +
geom_text(aes(label = sprintf("%1.0f", Y)), vjust = 1) +
scale_fill_gradient(low = "blue", high = "red") +
scale_x_discrete(labels=c("Female","Male")) +
scale_y_discrete(labels=c("Female","Male")) +
theme_bw() +
theme(legend.position = "none")
Y      <- c(7733, 26241, 54263, 14201)
df <- data.frame(Target, Prediction, Y)
ggplot(df, aes(x = Target, y = Prediction)) +
geom_tile(aes(fill = Y), color = "white") +
geom_text(aes(label = sprintf("%1.0f", Y)), vjust = 1) +
scale_fill_gradient(low = "blue", high = "red") +
scale_x_discrete(labels=c("Female","Male")) +
scale_y_discrete(labels=c("Female","Male")) +
theme_bw() +
theme(legend.position = "none")
Y      <- c(7733, 14201, 54263, 26241)
df <- data.frame(Target, Prediction, Y)
ggplot(df, aes(x = Target, y = Prediction)) +
geom_tile(aes(fill = Y), color = "white") +
geom_text(aes(label = sprintf("%1.0f", Y)), vjust = 1) +
scale_fill_gradient(low = "blue", high = "red") +
scale_x_discrete(labels=c("Female","Male")) +
scale_y_discrete(labels=c("Female","Male")) +
theme_bw() +
theme(legend.position = "none")
Y      <- c(26241, 14201, 54263, 7733)
df <- data.frame(Target, Prediction, Y)
ggplot(df, aes(x = Target, y = Prediction)) +
geom_tile(aes(fill = Y), color = "white") +
geom_text(aes(label = sprintf("%1.0f", Y)), vjust = 1) +
scale_fill_gradient(low = "blue", high = "red") +
scale_x_discrete(labels=c("Female","Male")) +
scale_y_discrete(labels=c("Female","Male")) +
theme_bw() +
theme(legend.position = "none")
df <- read.csv('../../data/01-modified-data/big_five_final.csv')
df <- df %>% dplyr::select(-c(age, case_id, country)) %>%
mutate(sex = factor(ifelse(sex == 1, 'Male', 'Female')))
df$sex <- as.factor(df$sex)
table(df$sex)
## ref: https://www.learnbymarketing.com/tutorials/naive-bayes-in-r/
split <- sample.split(df, SplitRatio=0.8)
train <- subset(df, split=='TRUE')
test <- subset(df, split=='FALSE')
table(train$sex)
table(test$sex)
library(quantmod)
library(ggplot2)
P <- matrix(c(0.2, 0, 0, 0.8, 0,
0, 0.2, 0, 0.8, 0,
0.2, 0.2, 0.2, 0.2, 0.2,
0, 0, 0.5, 0.5, 0,
0, 0.25, 0.5, 0, 0.25), ncol=5, nrow=5, byrow=T)
p
P <- matrix(c(0.2, 0, 0, 0.8, 0,
0, 0.2, 0, 0.8, 0,
0.2, 0.2, 0.2, 0.2, 0.2,
0, 0, 0.5, 0.5, 0,
0, 0.25, 0.5, 0, 0.25), ncol=5, nrow=5, byrow=T)
p
P <- matrix(c(0.2, 0, 0, 0.8, 0,
0, 0.2, 0, 0.8, 0,
0.2, 0.2, 0.2, 0.2, 0.2,
0, 0, 0.5, 0.5, 0,
0, 0.25, 0.5, 0, 0.25), ncol=5, nrow=5, byrow=T)
P
(P%*%P%*%P%*%P%*%P%*%P%*%P%*%P%*%P%*%P%*%P%*%P)[3, 4]
P <- matrix(0, ncol = 9, nrow = 9)
diag(P) <- 1/2
P[1,2] <- P[1,4] <- 1/4
P[2,1] <- P[2,3] <- P[2,5] <- 1/6
P[3,2] <- P[3,6] <- 1/4
P[4,1] <- P[4,5] <- P[4,7] <- 1/6
P[5,2] <- P[5,4] <- P[5,6] <- 1/6
P[6,3] <- P[6,5] <- 1/4
P[7,4] <- P[7,8] <- 1/4
P[8,7] <- P[8,9] <- 1/4
P[9,9] <- 1
P <- matrix(0, ncol = 9, nrow = 9)
diag(P) <- 1/2
P[1,2] <- P[1,4] <- 1/4
P[2,1] <- P[2,3] <- P[2,5] <- 1/6
P[3,2] <- P[3,6] <- 1/4
P[4,1] <- P[4,5] <- P[4,7] <- 1/6
P[5,2] <- P[5,4] <- P[5,6] <- 1/6
P[6,3] <- P[6,5] <- 1/4
P[7,4] <- P[7,8] <- 1/4
P[8,7] <- P[8,9] <- 1/4
P[9,9] <- 1
(P%*%P%*%P)[1,3]
P <- matrix(c(0.2, 0, 0, 0.8, 0,
0, 0.2, 0, 0.8, 0,
0.2, 0.2, 0.2, 0.2, 0.2,
0, 0, 0.5, 0.5, 0,
0, 0.25, 0.5, 0, 0.25), ncol=5, nrow=5, byrow=T)
rowSums(P)
P
P <- matrix(0, ncol = 9, nrow = 9)
diag(P) <- 1/2
P[1,2] <- P[1,4] <- 1/4
P[2,1] <- P[2,3] <- P[2,5] <- 1/6
P[3,2] <- P[3,6] <- 1/4
P[4,1] <- P[4,5] <- P[4,7] <- 1/6
P[5,2] <- P[5,4] <- P[5,6] <- 1/6
P[6,3] <- P[6,5] <- 1/4
P[7,4] <- P[7,8] <- 1/4
P[8,7] <- P[8,9] <- 1/4
P[9,9] <- 1
rowSums(P)
(P%*%P%*%P)[1,3]
powerP(P, 12)[3,4]
# 12 steps
powerP = function(A,n){
B <- 0*A
diag(B) <- 1  # make identity matrix
#now B is the identity matrix, it is for initial multiplication
#if you multiply a matrix with the identity matrix, it is the same
for (j in 1:n){
B <- B%*%A
}
return(B)
}
powerP(P, 12)[3,4]
(P%*%P%*%P%*%P%*%P%*%P%*%P%*%P%*%P%*%P%*%P%*%P)[3, 4]
P <- matrix(0, ncol = 9, nrow = 9)
diag(P) <- 1/2
P[1,2] <- P[1,4] <- 1/4
P[2,1] <- P[2,3] <- P[2,5] <- 1/6
P[3,2] <- P[3,6] <- 1/4
P[4,1] <- P[4,5] <- P[4,7] <- 1/6
P[5,2] <- P[5,4] <- P[5,6] <- 1/6
P[6,3] <- P[6,5] <- 1/4
P[7,4] <- P[7,8] <- 1/4
P[8,7] <- P[8,9] <- 1/4
P[9,9] <- 1
rowSums(P)
powerP(P, 3)[1, 3]
(P%*%P%*%P)[1,3]
# directly
P
# directly
1/2 * 1/4 * 1/6 + 1/4 * 1/2 * 1/6
# directly
1/2 * 1/4 * 1/6 + 1/4 * 1/2 * 1/6
# via matrix
P <- matrix(0, ncol = 9, nrow = 9)
diag(P) <- 1/2
P[1,2] <- P[1,4] <- 1/4
P[2,1] <- P[2,3] <- P[2,5] <- 1/6
P[3,2] <- P[3,6] <- 1/4
P[4,1] <- P[4,5] <- P[4,7] <- 1/6
P[5,2] <- P[5,4] <- P[5,6] <- 1/6
P[6,3] <- P[6,5] <- 1/4
P[7,4] <- P[7,8] <- 1/4
P[8,7] <- P[8,9] <- 1/4
P[9,9] <- 1
rowSums(P)
powerP(P, 3)[1, 3]
# directly
1/2 * 1/4 * 1/6 + 1/4 * 1/2 * 1/6
1/2 * 1/4 * 1/6
# via matrix
P <- matrix(0, ncol = 9, nrow = 9)
diag(P) <- 1/2
P[1,2] <- P[1,4] <- 1/4
P[2,1] <- P[2,3] <- P[2,5] <- 1/6
P[3,2] <- P[3,6] <- 1/4
P[4,1] <- P[4,5] <- P[4,7] <- 1/6
P[5,2] <- P[5,4] <- P[5,6] <- 1/6
P[6,3] <- P[6,5] <- 1/4
P[7,4] <- P[7,8] <- 1/4
P[8,7] <- P[8,9] <- 1/4
P[9,9] <- 1
rowSums(P)
powerP(P, 3)[1, 3]
# directly
1/2 * 1/4 * 1/6 + 1/4 * 1/2 * 1/6 + 1/4 * 1/6 * 1/2
powerP(P, 3)[1, 9]
powerP(P, 5)[1, 9]
powerP(P, 20)[1, 9]
powerP(P, 24)[1, 9]
powerP(P, 40)[1, 9]
powerP(P, 30)[1, 9]
powerP(P, 37)[1, 9]
powerP(P, 36)[1, 9]
powerP(P, 34)[1, 9]
powerP(P, 35)[1, 9]
powerP(P, 34)[1, 9]
steps=30
last_step =c()
simulation_number = 10000
for (i in 1:simulation_number){
states = rep(1,steps + 1)
for (j in 1:steps){
states[j+1] <- sample(9,1,prob = P[states[j],])
}
last_step[i] = states[steps+1] #last room he ends up on each iteration
}
table(last_step)
table(last_step)/simulation_number
steps=50
last_step =c()
simulation_number = 10000
for (i in 1:simulation_number){
states = rep(1,steps + 1)
for (j in 1:steps){
states[j+1] <- sample(9,1,prob = P[states[j],])
}
last_step[i] = states[steps+1] #last room he ends up on each iteration
}
table(last_step)/simulation_number
steps=100
steps=100
last_step =c()
simulation_number = 10000
for (i in 1:simulation_number){
states = rep(1,steps + 1)
for (j in 1:steps){
states[j+1] <- sample(9,1,prob = P[states[j],])
}
last_step[i] = states[steps+1] #last room he ends up on each iteration
}
table(last_step)/simulation_number
steps=150
last_step =c()
simulation_number = 10000
for (i in 1:simulation_number){
states = rep(1,steps + 1)
for (j in 1:steps){
states[j+1] <- sample(9,1,prob = P[states[j],])
}
last_step[i] = states[steps+1] #last room he ends up on each iteration
}
table(last_step)/simulation_number
steps=160
last_step =c()
simulation_number = 10000
for (i in 1:simulation_number){
states = rep(1,steps + 1)
for (j in 1:steps){
states[j+1] <- sample(9,1,prob = P[states[j],])
}
last_step[i] = states[steps+1] #last room he ends up on each iteration
}
table(last_step)/simulation_number
steps=155
last_step =c()
simulation_number = 10000
for (i in 1:simulation_number){
states = rep(1,steps + 1)
for (j in 1:steps){
states[j+1] <- sample(9,1,prob = P[states[j],])
}
last_step[i] = states[steps+1] #last room he ends up on each iteration
}
table(last_step)/simulation_number
steps=153
last_step =c()
simulation_number = 10000
for (i in 1:simulation_number){
states = rep(1,steps + 1)
for (j in 1:steps){
states[j+1] <- sample(9,1,prob = P[states[j],])
}
last_step[i] = states[steps+1] #last room he ends up on each iteration
}
table(last_step)/simulation_number
steps=154
last_step =c()
simulation_number = 10000
for (i in 1:simulation_number){
states = rep(1,steps + 1)
for (j in 1:steps){
states[j+1] <- sample(9,1,prob = P[states[j],])
}
last_step[i] = states[steps+1] #last room he ends up on each iteration
}
table(last_step)/simulation_number
steps=155
last_step =c()
simulation_number = 10000
for (i in 1:simulation_number){
states = rep(1,steps + 1)
for (j in 1:steps){
states[j+1] <- sample(9,1,prob = P[states[j],])
}
last_step[i] = states[steps+1] #last room he ends up on each iteration
}
set.seed(123)
steps=155
last_step =c()
simulation_number = 10000
for (i in 1:simulation_number){
states = rep(1,steps + 1)
for (j in 1:steps){
states[j+1] <- sample(9,1,prob = P[states[j],])
}
last_step[i] = states[steps+1] #last room he ends up on each iteration
}
table(last_step)/simulation_number
set.seed(123)
steps=153
last_step =c()
simulation_number = 10000
for (i in 1:simulation_number){
states = rep(1,steps + 1)
for (j in 1:steps){
states[j+1] <- sample(9,1,prob = P[states[j],])
}
last_step[i] = states[steps+1] #last room he ends up on each iteration
}
table(last_step)/simulation_number
set.seed(123)
steps=151
last_step =c()
simulation_number = 10000
for (i in 1:simulation_number){
states = rep(1,steps + 1)
for (j in 1:steps){
states[j+1] <- sample(9,1,prob = P[states[j],])
}
last_step[i] = states[steps+1] #last room he ends up on each iteration
}
table(last_step)/simulation_number
set.seed(123)
steps=148
last_step =c()
simulation_number = 10000
for (i in 1:simulation_number){
states = rep(1,steps + 1)
for (j in 1:steps){
states[j+1] <- sample(9,1,prob = P[states[j],])
}
last_step[i] = states[steps+1] #last room he ends up on each iteration
}
table(last_step)/simulation_number
set.seed(123)
steps=149
last_step =c()
simulation_number = 10000
for (i in 1:simulation_number){
states = rep(1,steps + 1)
for (j in 1:steps){
states[j+1] <- sample(9,1,prob = P[states[j],])
}
last_step[i] = states[steps+1] #last room he ends up on each iteration
}
table(last_step)/simulation_number
set.seed(123)
steps=150
last_step =c()
simulation_number = 10000
for (i in 1:simulation_number){
states = rep(1,steps + 1)
for (j in 1:steps){
states[j+1] <- sample(9,1,prob = P[states[j],])
}
last_step[i] = states[steps+1] #last room he ends up on each iteration
}
table(last_step)/simulation_number
set.seed(123)
steps=151
last_step =c()
simulation_number = 10000
for (i in 1:simulation_number){
states = rep(1,steps + 1)
for (j in 1:steps){
states[j+1] <- sample(9,1,prob = P[states[j],])
}
last_step[i] = states[steps+1] #last room he ends up on each iteration
}
table(last_step)/simulation_number
